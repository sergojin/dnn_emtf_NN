-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity emtfptnn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input1_0_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_0_V_ap_vld : IN STD_LOGIC;
    input1_1_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_1_V_ap_vld : IN STD_LOGIC;
    input1_2_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_2_V_ap_vld : IN STD_LOGIC;
    input1_3_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_3_V_ap_vld : IN STD_LOGIC;
    input1_4_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_4_V_ap_vld : IN STD_LOGIC;
    input1_5_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_5_V_ap_vld : IN STD_LOGIC;
    input1_6_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_6_V_ap_vld : IN STD_LOGIC;
    input1_7_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_7_V_ap_vld : IN STD_LOGIC;
    input1_8_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_8_V_ap_vld : IN STD_LOGIC;
    input1_9_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_9_V_ap_vld : IN STD_LOGIC;
    input1_10_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_10_V_ap_vld : IN STD_LOGIC;
    input1_11_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_11_V_ap_vld : IN STD_LOGIC;
    input1_12_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_12_V_ap_vld : IN STD_LOGIC;
    input1_13_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_13_V_ap_vld : IN STD_LOGIC;
    input1_14_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_14_V_ap_vld : IN STD_LOGIC;
    input1_15_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_15_V_ap_vld : IN STD_LOGIC;
    input1_16_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_16_V_ap_vld : IN STD_LOGIC;
    input1_17_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_17_V_ap_vld : IN STD_LOGIC;
    input1_18_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_18_V_ap_vld : IN STD_LOGIC;
    input1_19_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_19_V_ap_vld : IN STD_LOGIC;
    input1_20_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_20_V_ap_vld : IN STD_LOGIC;
    input1_21_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_21_V_ap_vld : IN STD_LOGIC;
    input1_22_V : IN STD_LOGIC_VECTOR (17 downto 0);
    input1_22_V_ap_vld : IN STD_LOGIC;
    layer16_out_0_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer16_out_0_V_ap_vld : OUT STD_LOGIC;
    layer16_out_1_V : OUT STD_LOGIC_VECTOR (11 downto 0);
    layer16_out_1_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of emtfptnn is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "emtfptnn,hls_ip_2020_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690t-ffg1927-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=11.001437,HLS_SYN_LAT=17,HLS_SYN_TPT=1,HLS_SYN_MEM=23,HLS_SYN_DSP=974,HLS_SYN_FF=23998,HLS_SYN_LUT=32137,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_17 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010111";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal layer4_out_0_V_reg_965 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_1_V_reg_970 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_2_V_reg_975 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_3_V_reg_980 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_4_V_reg_985 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_5_V_reg_990 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_6_V_reg_995 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_7_V_reg_1000 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_8_V_reg_1005 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_9_V_reg_1010 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_10_V_reg_1015 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_11_V_reg_1020 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_12_V_reg_1025 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_13_V_reg_1030 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_14_V_reg_1035 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_15_V_reg_1040 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_16_V_reg_1045 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_17_V_reg_1050 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_18_V_reg_1055 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer4_out_19_V_reg_1060 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_0_V_reg_1165 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_1_V_reg_1170 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_2_V_reg_1175 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_3_V_reg_1180 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_4_V_reg_1185 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_5_V_reg_1190 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_6_V_reg_1195 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_7_V_reg_1200 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_8_V_reg_1205 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_9_V_reg_1210 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_10_V_reg_1215 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_11_V_reg_1220 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_12_V_reg_1225 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_13_V_reg_1230 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer8_out_14_V_reg_1235 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_0_V_reg_1240 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_1_V_reg_1245 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_2_V_reg_1250 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_3_V_reg_1255 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_4_V_reg_1260 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_5_V_reg_1265 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_6_V_reg_1270 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_7_V_reg_1275 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_8_V_reg_1280 : STD_LOGIC_VECTOR (23 downto 0);
    signal layer12_out_9_V_reg_1285 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_15 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_16 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_17 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_18 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_return_19 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_1_fu_144_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call34 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call34 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call34 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call34 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call34 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call34 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call34 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call34 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call34 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call34 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call34 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call34 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call34 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call34 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call34 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call34 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call34 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call34 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp19 : BOOLEAN;
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_s_fu_148_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call97 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call97 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call97 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call97 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call97 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call97 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call97 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call97 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call97 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call97 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call97 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call97 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call97 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call97 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call97 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call97 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call97 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call97 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp87 : BOOLEAN;
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_2_fu_172_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call145 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call145 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call145 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call145 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call145 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call145 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call145 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call145 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call145 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call145 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call145 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call145 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call145 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call145 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call145 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call145 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call145 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call145 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp140 : BOOLEAN;
    signal grp_tanh_fu_191_ap_start : STD_LOGIC;
    signal grp_tanh_fu_191_ap_done : STD_LOGIC;
    signal grp_tanh_fu_191_ap_idle : STD_LOGIC;
    signal grp_tanh_fu_191_ap_ready : STD_LOGIC;
    signal grp_tanh_fu_191_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_15 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_16 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_17 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_18 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_fu_191_ap_return_19 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_start : STD_LOGIC;
    signal grp_tanh_2_fu_217_ap_done : STD_LOGIC;
    signal grp_tanh_2_fu_217_ap_idle : STD_LOGIC;
    signal grp_tanh_2_fu_217_ap_ready : STD_LOGIC;
    signal grp_tanh_2_fu_217_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_2_fu_217_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_start : STD_LOGIC;
    signal grp_tanh_1_fu_238_ap_done : STD_LOGIC;
    signal grp_tanh_1_fu_238_ap_idle : STD_LOGIC;
    signal grp_tanh_1_fu_238_ap_ready : STD_LOGIC;
    signal grp_tanh_1_fu_238_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_tanh_1_fu_238_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_ready : STD_LOGIC;
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_15 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_16 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_17 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_18 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_19 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_ready : STD_LOGIC;
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_10 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_11 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_12 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_13 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_14 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_ready : STD_LOGIC;
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_0 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_1 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_2 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_3 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_4 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_5 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_6 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_7 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_8 : STD_LOGIC_VECTOR (23 downto 0);
    signal call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_9 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_dense_latency_0_0_0_fu_311_ap_return_0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dense_latency_0_0_0_fu_311_ap_return_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_dense_latency_0_0_0_fu_311_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call178 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call178 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call178 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call178 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call178 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5_ignore_call178 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6_ignore_call178 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7_ignore_call178 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8_ignore_call178 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9_ignore_call178 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10_ignore_call178 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11_ignore_call178 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12_ignore_call178 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13_ignore_call178 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14_ignore_call178 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15_ignore_call178 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16_ignore_call178 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17_ignore_call178 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp176 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_tanh_fu_191_ap_start_reg : STD_LOGIC := '0';
    signal grp_tanh_2_fu_217_ap_start_reg : STD_LOGIC := '0';
    signal grp_tanh_1_fu_238_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to16 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component dense_latency_0_0_0_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component dense_latency_0_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component dense_latency_0_0_0_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component tanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component tanh_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component tanh_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component normalize_0_0_0_0_0_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component normalize_0_0_0_0_0_2 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component normalize_0_0_0_0_0_1 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0) );
    end component;


    component dense_latency_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (11 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;



begin
    grp_dense_latency_0_0_0_1_fu_144 : component dense_latency_0_0_0_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_return_0 => grp_dense_latency_0_0_0_1_fu_144_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_1_fu_144_ap_return_1,
        ap_return_2 => grp_dense_latency_0_0_0_1_fu_144_ap_return_2,
        ap_return_3 => grp_dense_latency_0_0_0_1_fu_144_ap_return_3,
        ap_return_4 => grp_dense_latency_0_0_0_1_fu_144_ap_return_4,
        ap_return_5 => grp_dense_latency_0_0_0_1_fu_144_ap_return_5,
        ap_return_6 => grp_dense_latency_0_0_0_1_fu_144_ap_return_6,
        ap_return_7 => grp_dense_latency_0_0_0_1_fu_144_ap_return_7,
        ap_return_8 => grp_dense_latency_0_0_0_1_fu_144_ap_return_8,
        ap_return_9 => grp_dense_latency_0_0_0_1_fu_144_ap_return_9,
        ap_return_10 => grp_dense_latency_0_0_0_1_fu_144_ap_return_10,
        ap_return_11 => grp_dense_latency_0_0_0_1_fu_144_ap_return_11,
        ap_return_12 => grp_dense_latency_0_0_0_1_fu_144_ap_return_12,
        ap_return_13 => grp_dense_latency_0_0_0_1_fu_144_ap_return_13,
        ap_return_14 => grp_dense_latency_0_0_0_1_fu_144_ap_return_14,
        ap_return_15 => grp_dense_latency_0_0_0_1_fu_144_ap_return_15,
        ap_return_16 => grp_dense_latency_0_0_0_1_fu_144_ap_return_16,
        ap_return_17 => grp_dense_latency_0_0_0_1_fu_144_ap_return_17,
        ap_return_18 => grp_dense_latency_0_0_0_1_fu_144_ap_return_18,
        ap_return_19 => grp_dense_latency_0_0_0_1_fu_144_ap_return_19,
        ap_ce => grp_dense_latency_0_0_0_1_fu_144_ap_ce);

    grp_dense_latency_0_0_0_s_fu_148 : component dense_latency_0_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => grp_tanh_fu_191_ap_return_0,
        data_1_V_read => grp_tanh_fu_191_ap_return_1,
        data_2_V_read => grp_tanh_fu_191_ap_return_2,
        data_3_V_read => grp_tanh_fu_191_ap_return_3,
        data_4_V_read => grp_tanh_fu_191_ap_return_4,
        data_5_V_read => grp_tanh_fu_191_ap_return_5,
        data_6_V_read => grp_tanh_fu_191_ap_return_6,
        data_7_V_read => grp_tanh_fu_191_ap_return_7,
        data_8_V_read => grp_tanh_fu_191_ap_return_8,
        data_9_V_read => grp_tanh_fu_191_ap_return_9,
        data_10_V_read => grp_tanh_fu_191_ap_return_10,
        data_11_V_read => grp_tanh_fu_191_ap_return_11,
        data_12_V_read => grp_tanh_fu_191_ap_return_12,
        data_13_V_read => grp_tanh_fu_191_ap_return_13,
        data_14_V_read => grp_tanh_fu_191_ap_return_14,
        data_15_V_read => grp_tanh_fu_191_ap_return_15,
        data_16_V_read => grp_tanh_fu_191_ap_return_16,
        data_17_V_read => grp_tanh_fu_191_ap_return_17,
        data_18_V_read => grp_tanh_fu_191_ap_return_18,
        data_19_V_read => grp_tanh_fu_191_ap_return_19,
        ap_return_0 => grp_dense_latency_0_0_0_s_fu_148_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_s_fu_148_ap_return_1,
        ap_return_2 => grp_dense_latency_0_0_0_s_fu_148_ap_return_2,
        ap_return_3 => grp_dense_latency_0_0_0_s_fu_148_ap_return_3,
        ap_return_4 => grp_dense_latency_0_0_0_s_fu_148_ap_return_4,
        ap_return_5 => grp_dense_latency_0_0_0_s_fu_148_ap_return_5,
        ap_return_6 => grp_dense_latency_0_0_0_s_fu_148_ap_return_6,
        ap_return_7 => grp_dense_latency_0_0_0_s_fu_148_ap_return_7,
        ap_return_8 => grp_dense_latency_0_0_0_s_fu_148_ap_return_8,
        ap_return_9 => grp_dense_latency_0_0_0_s_fu_148_ap_return_9,
        ap_return_10 => grp_dense_latency_0_0_0_s_fu_148_ap_return_10,
        ap_return_11 => grp_dense_latency_0_0_0_s_fu_148_ap_return_11,
        ap_return_12 => grp_dense_latency_0_0_0_s_fu_148_ap_return_12,
        ap_return_13 => grp_dense_latency_0_0_0_s_fu_148_ap_return_13,
        ap_return_14 => grp_dense_latency_0_0_0_s_fu_148_ap_return_14,
        ap_ce => grp_dense_latency_0_0_0_s_fu_148_ap_ce);

    grp_dense_latency_0_0_0_2_fu_172 : component dense_latency_0_0_0_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => grp_tanh_2_fu_217_ap_return_0,
        data_1_V_read => grp_tanh_2_fu_217_ap_return_1,
        data_2_V_read => grp_tanh_2_fu_217_ap_return_2,
        data_3_V_read => grp_tanh_2_fu_217_ap_return_3,
        data_4_V_read => grp_tanh_2_fu_217_ap_return_4,
        data_5_V_read => grp_tanh_2_fu_217_ap_return_5,
        data_6_V_read => grp_tanh_2_fu_217_ap_return_6,
        data_7_V_read => grp_tanh_2_fu_217_ap_return_7,
        data_8_V_read => grp_tanh_2_fu_217_ap_return_8,
        data_9_V_read => grp_tanh_2_fu_217_ap_return_9,
        data_10_V_read => grp_tanh_2_fu_217_ap_return_10,
        data_11_V_read => grp_tanh_2_fu_217_ap_return_11,
        data_12_V_read => grp_tanh_2_fu_217_ap_return_12,
        data_13_V_read => grp_tanh_2_fu_217_ap_return_13,
        data_14_V_read => grp_tanh_2_fu_217_ap_return_14,
        ap_return_0 => grp_dense_latency_0_0_0_2_fu_172_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_2_fu_172_ap_return_1,
        ap_return_2 => grp_dense_latency_0_0_0_2_fu_172_ap_return_2,
        ap_return_3 => grp_dense_latency_0_0_0_2_fu_172_ap_return_3,
        ap_return_4 => grp_dense_latency_0_0_0_2_fu_172_ap_return_4,
        ap_return_5 => grp_dense_latency_0_0_0_2_fu_172_ap_return_5,
        ap_return_6 => grp_dense_latency_0_0_0_2_fu_172_ap_return_6,
        ap_return_7 => grp_dense_latency_0_0_0_2_fu_172_ap_return_7,
        ap_return_8 => grp_dense_latency_0_0_0_2_fu_172_ap_return_8,
        ap_return_9 => grp_dense_latency_0_0_0_2_fu_172_ap_return_9,
        ap_ce => grp_dense_latency_0_0_0_2_fu_172_ap_ce);

    grp_tanh_fu_191 : component tanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_fu_191_ap_start,
        ap_done => grp_tanh_fu_191_ap_done,
        ap_idle => grp_tanh_fu_191_ap_idle,
        ap_ready => grp_tanh_fu_191_ap_ready,
        data_0_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_0,
        data_1_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_1,
        data_2_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_2,
        data_3_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_3,
        data_4_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_4,
        data_5_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_5,
        data_6_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_6,
        data_7_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_7,
        data_8_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_8,
        data_9_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_9,
        data_10_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_10,
        data_11_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_11,
        data_12_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_12,
        data_13_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_13,
        data_14_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_14,
        data_15_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_15,
        data_16_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_16,
        data_17_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_17,
        data_18_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_18,
        data_19_V_read => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_19,
        ap_return_0 => grp_tanh_fu_191_ap_return_0,
        ap_return_1 => grp_tanh_fu_191_ap_return_1,
        ap_return_2 => grp_tanh_fu_191_ap_return_2,
        ap_return_3 => grp_tanh_fu_191_ap_return_3,
        ap_return_4 => grp_tanh_fu_191_ap_return_4,
        ap_return_5 => grp_tanh_fu_191_ap_return_5,
        ap_return_6 => grp_tanh_fu_191_ap_return_6,
        ap_return_7 => grp_tanh_fu_191_ap_return_7,
        ap_return_8 => grp_tanh_fu_191_ap_return_8,
        ap_return_9 => grp_tanh_fu_191_ap_return_9,
        ap_return_10 => grp_tanh_fu_191_ap_return_10,
        ap_return_11 => grp_tanh_fu_191_ap_return_11,
        ap_return_12 => grp_tanh_fu_191_ap_return_12,
        ap_return_13 => grp_tanh_fu_191_ap_return_13,
        ap_return_14 => grp_tanh_fu_191_ap_return_14,
        ap_return_15 => grp_tanh_fu_191_ap_return_15,
        ap_return_16 => grp_tanh_fu_191_ap_return_16,
        ap_return_17 => grp_tanh_fu_191_ap_return_17,
        ap_return_18 => grp_tanh_fu_191_ap_return_18,
        ap_return_19 => grp_tanh_fu_191_ap_return_19);

    grp_tanh_2_fu_217 : component tanh_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_2_fu_217_ap_start,
        ap_done => grp_tanh_2_fu_217_ap_done,
        ap_idle => grp_tanh_2_fu_217_ap_idle,
        ap_ready => grp_tanh_2_fu_217_ap_ready,
        data_0_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_0,
        data_1_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_1,
        data_2_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_2,
        data_3_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_3,
        data_4_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_4,
        data_5_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_5,
        data_6_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_6,
        data_7_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_7,
        data_8_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_8,
        data_9_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_9,
        data_10_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_10,
        data_11_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_11,
        data_12_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_12,
        data_13_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_13,
        data_14_V_read => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_14,
        ap_return_0 => grp_tanh_2_fu_217_ap_return_0,
        ap_return_1 => grp_tanh_2_fu_217_ap_return_1,
        ap_return_2 => grp_tanh_2_fu_217_ap_return_2,
        ap_return_3 => grp_tanh_2_fu_217_ap_return_3,
        ap_return_4 => grp_tanh_2_fu_217_ap_return_4,
        ap_return_5 => grp_tanh_2_fu_217_ap_return_5,
        ap_return_6 => grp_tanh_2_fu_217_ap_return_6,
        ap_return_7 => grp_tanh_2_fu_217_ap_return_7,
        ap_return_8 => grp_tanh_2_fu_217_ap_return_8,
        ap_return_9 => grp_tanh_2_fu_217_ap_return_9,
        ap_return_10 => grp_tanh_2_fu_217_ap_return_10,
        ap_return_11 => grp_tanh_2_fu_217_ap_return_11,
        ap_return_12 => grp_tanh_2_fu_217_ap_return_12,
        ap_return_13 => grp_tanh_2_fu_217_ap_return_13,
        ap_return_14 => grp_tanh_2_fu_217_ap_return_14);

    grp_tanh_1_fu_238 : component tanh_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_1_fu_238_ap_start,
        ap_done => grp_tanh_1_fu_238_ap_done,
        ap_idle => grp_tanh_1_fu_238_ap_idle,
        ap_ready => grp_tanh_1_fu_238_ap_ready,
        data_0_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_0,
        data_1_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_1,
        data_2_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_2,
        data_3_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_3,
        data_4_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_4,
        data_5_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_5,
        data_6_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_6,
        data_7_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_7,
        data_8_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_8,
        data_9_V_read => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_9,
        ap_return_0 => grp_tanh_1_fu_238_ap_return_0,
        ap_return_1 => grp_tanh_1_fu_238_ap_return_1,
        ap_return_2 => grp_tanh_1_fu_238_ap_return_2,
        ap_return_3 => grp_tanh_1_fu_238_ap_return_3,
        ap_return_4 => grp_tanh_1_fu_238_ap_return_4,
        ap_return_5 => grp_tanh_1_fu_238_ap_return_5,
        ap_return_6 => grp_tanh_1_fu_238_ap_return_6,
        ap_return_7 => grp_tanh_1_fu_238_ap_return_7,
        ap_return_8 => grp_tanh_1_fu_238_ap_return_8,
        ap_return_9 => grp_tanh_1_fu_238_ap_return_9);

    call_ret3_normalize_0_0_0_0_0_s_fu_254 : component normalize_0_0_0_0_0_s
    port map (
        ap_ready => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_ready,
        data_0_V_read => layer4_out_0_V_reg_965,
        data_1_V_read => layer4_out_1_V_reg_970,
        data_2_V_read => layer4_out_2_V_reg_975,
        data_3_V_read => layer4_out_3_V_reg_980,
        data_4_V_read => layer4_out_4_V_reg_985,
        data_5_V_read => layer4_out_5_V_reg_990,
        data_6_V_read => layer4_out_6_V_reg_995,
        data_7_V_read => layer4_out_7_V_reg_1000,
        data_8_V_read => layer4_out_8_V_reg_1005,
        data_9_V_read => layer4_out_9_V_reg_1010,
        data_10_V_read => layer4_out_10_V_reg_1015,
        data_11_V_read => layer4_out_11_V_reg_1020,
        data_12_V_read => layer4_out_12_V_reg_1025,
        data_13_V_read => layer4_out_13_V_reg_1030,
        data_14_V_read => layer4_out_14_V_reg_1035,
        data_15_V_read => layer4_out_15_V_reg_1040,
        data_16_V_read => layer4_out_16_V_reg_1045,
        data_17_V_read => layer4_out_17_V_reg_1050,
        data_18_V_read => layer4_out_18_V_reg_1055,
        data_19_V_read => layer4_out_19_V_reg_1060,
        ap_return_0 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_0,
        ap_return_1 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_1,
        ap_return_2 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_2,
        ap_return_3 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_3,
        ap_return_4 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_4,
        ap_return_5 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_5,
        ap_return_6 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_6,
        ap_return_7 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_7,
        ap_return_8 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_8,
        ap_return_9 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_9,
        ap_return_10 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_10,
        ap_return_11 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_11,
        ap_return_12 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_12,
        ap_return_13 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_13,
        ap_return_14 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_14,
        ap_return_15 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_15,
        ap_return_16 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_16,
        ap_return_17 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_17,
        ap_return_18 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_18,
        ap_return_19 => call_ret3_normalize_0_0_0_0_0_s_fu_254_ap_return_19);

    call_ret6_normalize_0_0_0_0_0_2_fu_278 : component normalize_0_0_0_0_0_2
    port map (
        ap_ready => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_ready,
        data_0_V_read => layer8_out_0_V_reg_1165,
        data_1_V_read => layer8_out_1_V_reg_1170,
        data_2_V_read => layer8_out_2_V_reg_1175,
        data_3_V_read => layer8_out_3_V_reg_1180,
        data_4_V_read => layer8_out_4_V_reg_1185,
        data_5_V_read => layer8_out_5_V_reg_1190,
        data_6_V_read => layer8_out_6_V_reg_1195,
        data_7_V_read => layer8_out_7_V_reg_1200,
        data_8_V_read => layer8_out_8_V_reg_1205,
        data_9_V_read => layer8_out_9_V_reg_1210,
        data_10_V_read => layer8_out_10_V_reg_1215,
        data_11_V_read => layer8_out_11_V_reg_1220,
        data_12_V_read => layer8_out_12_V_reg_1225,
        data_13_V_read => layer8_out_13_V_reg_1230,
        data_14_V_read => layer8_out_14_V_reg_1235,
        ap_return_0 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_0,
        ap_return_1 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_1,
        ap_return_2 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_2,
        ap_return_3 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_3,
        ap_return_4 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_4,
        ap_return_5 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_5,
        ap_return_6 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_6,
        ap_return_7 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_7,
        ap_return_8 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_8,
        ap_return_9 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_9,
        ap_return_10 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_10,
        ap_return_11 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_11,
        ap_return_12 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_12,
        ap_return_13 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_13,
        ap_return_14 => call_ret6_normalize_0_0_0_0_0_2_fu_278_ap_return_14);

    call_ret9_normalize_0_0_0_0_0_1_fu_297 : component normalize_0_0_0_0_0_1
    port map (
        ap_ready => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_ready,
        data_0_V_read => layer12_out_0_V_reg_1240,
        data_1_V_read => layer12_out_1_V_reg_1245,
        data_2_V_read => layer12_out_2_V_reg_1250,
        data_3_V_read => layer12_out_3_V_reg_1255,
        data_4_V_read => layer12_out_4_V_reg_1260,
        data_5_V_read => layer12_out_5_V_reg_1265,
        data_6_V_read => layer12_out_6_V_reg_1270,
        data_7_V_read => layer12_out_7_V_reg_1275,
        data_8_V_read => layer12_out_8_V_reg_1280,
        data_9_V_read => layer12_out_9_V_reg_1285,
        ap_return_0 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_0,
        ap_return_1 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_1,
        ap_return_2 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_2,
        ap_return_3 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_3,
        ap_return_4 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_4,
        ap_return_5 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_5,
        ap_return_6 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_6,
        ap_return_7 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_7,
        ap_return_8 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_8,
        ap_return_9 => call_ret9_normalize_0_0_0_0_0_1_fu_297_ap_return_9);

    grp_dense_latency_0_0_0_fu_311 : component dense_latency_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => grp_tanh_1_fu_238_ap_return_0,
        data_1_V_read => grp_tanh_1_fu_238_ap_return_1,
        data_2_V_read => grp_tanh_1_fu_238_ap_return_2,
        data_3_V_read => grp_tanh_1_fu_238_ap_return_3,
        data_4_V_read => grp_tanh_1_fu_238_ap_return_4,
        data_5_V_read => grp_tanh_1_fu_238_ap_return_5,
        data_6_V_read => grp_tanh_1_fu_238_ap_return_6,
        data_7_V_read => grp_tanh_1_fu_238_ap_return_7,
        data_8_V_read => grp_tanh_1_fu_238_ap_return_8,
        data_9_V_read => grp_tanh_1_fu_238_ap_return_9,
        ap_return_0 => grp_dense_latency_0_0_0_fu_311_ap_return_0,
        ap_return_1 => grp_dense_latency_0_0_0_fu_311_ap_return_1,
        ap_ce => grp_dense_latency_0_0_0_fu_311_ap_ce);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_1_fu_238_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_1_fu_238_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1))) then 
                    grp_tanh_1_fu_238_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_1_fu_238_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_1_fu_238_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_2_fu_217_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_2_fu_217_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter9 = ap_const_logic_1))) then 
                    grp_tanh_2_fu_217_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_2_fu_217_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_2_fu_217_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_fu_191_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_fu_191_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    grp_tanh_fu_191_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_fu_191_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_fu_191_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                layer12_out_0_V_reg_1240 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_0;
                layer12_out_1_V_reg_1245 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_1;
                layer12_out_2_V_reg_1250 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_2;
                layer12_out_3_V_reg_1255 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_3;
                layer12_out_4_V_reg_1260 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_4;
                layer12_out_5_V_reg_1265 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_5;
                layer12_out_6_V_reg_1270 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_6;
                layer12_out_7_V_reg_1275 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_7;
                layer12_out_8_V_reg_1280 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_8;
                layer12_out_9_V_reg_1285 <= grp_dense_latency_0_0_0_2_fu_172_ap_return_9;
                layer4_out_0_V_reg_965 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_0;
                layer4_out_10_V_reg_1015 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_10;
                layer4_out_11_V_reg_1020 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_11;
                layer4_out_12_V_reg_1025 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_12;
                layer4_out_13_V_reg_1030 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_13;
                layer4_out_14_V_reg_1035 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_14;
                layer4_out_15_V_reg_1040 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_15;
                layer4_out_16_V_reg_1045 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_16;
                layer4_out_17_V_reg_1050 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_17;
                layer4_out_18_V_reg_1055 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_18;
                layer4_out_19_V_reg_1060 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_19;
                layer4_out_1_V_reg_970 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_1;
                layer4_out_2_V_reg_975 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_2;
                layer4_out_3_V_reg_980 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_3;
                layer4_out_4_V_reg_985 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_4;
                layer4_out_5_V_reg_990 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_5;
                layer4_out_6_V_reg_995 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_6;
                layer4_out_7_V_reg_1000 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_7;
                layer4_out_8_V_reg_1005 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_8;
                layer4_out_9_V_reg_1010 <= grp_dense_latency_0_0_0_1_fu_144_ap_return_9;
                layer8_out_0_V_reg_1165 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_0;
                layer8_out_10_V_reg_1215 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_10;
                layer8_out_11_V_reg_1220 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_11;
                layer8_out_12_V_reg_1225 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_12;
                layer8_out_13_V_reg_1230 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_13;
                layer8_out_14_V_reg_1235 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_14;
                layer8_out_1_V_reg_1170 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_1;
                layer8_out_2_V_reg_1175 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_2;
                layer8_out_3_V_reg_1180 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_3;
                layer8_out_4_V_reg_1185 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_4;
                layer8_out_5_V_reg_1190 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_5;
                layer8_out_6_V_reg_1195 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_6;
                layer8_out_7_V_reg_1200 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_7;
                layer8_out_8_V_reg_1205 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_8;
                layer8_out_9_V_reg_1210 <= grp_dense_latency_0_0_0_s_fu_148_ap_return_9;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp140_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp140 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp176_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp176 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp19_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp19 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp87_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp87 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter9_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call145_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call145 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call178_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call178 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call34_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call34 <= (ap_start = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call97_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call97 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call145 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call178 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8_ignore_call97 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17)
    begin
        if (((ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to16_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16)
    begin
        if (((ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to16 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to16 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to16)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to16 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in_1 <= ap_const_lv16_17;

    const_size_in_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_2;

    const_size_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_0_0_0_1_fu_144_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp19)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp19) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_dense_latency_0_0_0_1_fu_144_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_0_0_0_1_fu_144_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_0_0_0_2_fu_172_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp140)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp140) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_dense_latency_0_0_0_2_fu_172_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_0_0_0_2_fu_172_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_0_0_0_fu_311_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp176)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp176) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_dense_latency_0_0_0_fu_311_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_0_0_0_fu_311_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_0_0_0_s_fu_148_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp87)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp87) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_dense_latency_0_0_0_s_fu_148_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_0_0_0_s_fu_148_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_tanh_1_fu_238_ap_start <= grp_tanh_1_fu_238_ap_start_reg;
    grp_tanh_2_fu_217_ap_start <= grp_tanh_2_fu_217_ap_start_reg;
    grp_tanh_fu_191_ap_start <= grp_tanh_fu_191_ap_start_reg;
    layer16_out_0_V <= grp_dense_latency_0_0_0_fu_311_ap_return_0;

    layer16_out_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            layer16_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer16_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer16_out_1_V <= grp_dense_latency_0_0_0_fu_311_ap_return_1;

    layer16_out_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter17, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter17 = ap_const_logic_1))) then 
            layer16_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            layer16_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
