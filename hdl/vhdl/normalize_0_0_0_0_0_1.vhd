-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity normalize_0_0_0_0_0_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (23 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (23 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of normalize_0_0_0_0_0_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv37_1B40 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001101101000000";
    constant ap_const_lv37_1687 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001011010000111";
    constant ap_const_lv36_F1D : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000111100011101";
    constant ap_const_lv37_1390 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001001110010000";
    constant ap_const_lv37_1706 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001011100000110";
    constant ap_const_lv37_1217 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001001000010111";
    constant ap_const_lv36_CDE : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000110011011110";
    constant ap_const_lv37_19F8 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001100111111000";
    constant ap_const_lv36_E86 : STD_LOGIC_VECTOR (35 downto 0) := "000000000000000000000000111010000110";
    constant ap_const_lv37_10D7 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000000000000000001000011010111";
    constant ap_const_lv37_1D10000 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001110100010000000000000000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv37_1FF68E4000 : STD_LOGIC_VECTOR (36 downto 0) := "1111111110110100011100100000000000000";
    constant ap_const_lv37_1FF057C000 : STD_LOGIC_VECTOR (36 downto 0) := "1111111110000010101111100000000000000";
    constant ap_const_lv37_1FF9DBA000 : STD_LOGIC_VECTOR (36 downto 0) := "1111111111001110110111010000000000000";
    constant ap_const_lv36_FF16CE000 : STD_LOGIC_VECTOR (35 downto 0) := "111111110001011011001110000000000000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv36_FF76D0000 : STD_LOGIC_VECTOR (35 downto 0) := "111111110111011011010000000000000000";
    constant ap_const_lv37_155C000 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000001010101011100000000000000";
    constant ap_const_lv37_512A000 : STD_LOGIC_VECTOR (36 downto 0) := "0000000000101000100101010000000000000";
    constant ap_const_lv36_5B26000 : STD_LOGIC_VECTOR (35 downto 0) := "000000000101101100100110000000000000";
    constant ap_const_lv37_1FF461A000 : STD_LOGIC_VECTOR (36 downto 0) := "1111111110100011000011010000000000000";

    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal grp_fu_154_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_reg_957 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_3_reg_962 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_4_reg_967 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_158_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_5_reg_972 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_156_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_14_reg_977 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_160_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_15_reg_982 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_157_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_6_reg_987 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_159_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_7_reg_992 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_162_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal mul_ln1192_16_reg_997 : STD_LOGIC_VECTOR (35 downto 0);
    signal grp_fu_163_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal mul_ln1192_8_reg_1002 : STD_LOGIC_VECTOR (36 downto 0);
    signal grp_fu_154_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_155_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_156_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_157_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_158_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_159_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_160_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_161_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_162_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_163_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln1192_fu_685_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_15_fu_700_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_16_fu_715_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_17_fu_730_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_18_fu_745_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_118_fu_750_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_19_fu_764_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_119_fu_769_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_20_fu_783_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_21_fu_798_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal add_ln1192_22_fu_813_p2 : STD_LOGIC_VECTOR (35 downto 0);
    signal tmp_120_fu_818_p4 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln1192_23_fu_832_p2 : STD_LOGIC_VECTOR (36 downto 0);
    signal sext_ln708_fu_760_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln708_11_fu_779_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln708_12_fu_828_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_154_ce : STD_LOGIC;
    signal grp_fu_155_ce : STD_LOGIC;
    signal grp_fu_156_ce : STD_LOGIC;
    signal grp_fu_157_ce : STD_LOGIC;
    signal grp_fu_158_ce : STD_LOGIC;
    signal grp_fu_159_ce : STD_LOGIC;
    signal grp_fu_160_ce : STD_LOGIC;
    signal grp_fu_161_ce : STD_LOGIC;
    signal grp_fu_162_ce : STD_LOGIC;
    signal grp_fu_163_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal data_0_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_1_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_2_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_3_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_4_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_5_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_6_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_7_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_8_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal data_9_V_read_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_0_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_1_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_2_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_3_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_4_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_5_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_6_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_7_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_8_int_reg : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_return_9_int_reg : STD_LOGIC_VECTOR (23 downto 0);

    component emtfptnn_mul_24s_14ns_37_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (36 downto 0) );
    end component;


    component emtfptnn_mul_24s_13ns_36_4_0 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (23 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (35 downto 0) );
    end component;



begin
    emtfptnn_mul_24s_14ns_37_4_0_U153 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_0_V_read_int_reg,
        din1 => grp_fu_154_p1,
        ce => grp_fu_154_ce,
        dout => grp_fu_154_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U154 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_2_V_read_int_reg,
        din1 => grp_fu_155_p1,
        ce => grp_fu_155_ce,
        dout => grp_fu_155_p2);

    emtfptnn_mul_24s_13ns_36_4_0_U155 : component emtfptnn_mul_24s_13ns_36_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 13,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_4_V_read_int_reg,
        din1 => grp_fu_156_p1,
        ce => grp_fu_156_ce,
        dout => grp_fu_156_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U156 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_6_V_read_int_reg,
        din1 => grp_fu_157_p1,
        ce => grp_fu_157_ce,
        dout => grp_fu_157_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U157 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_3_V_read_int_reg,
        din1 => grp_fu_158_p1,
        ce => grp_fu_158_ce,
        dout => grp_fu_158_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U158 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_7_V_read_int_reg,
        din1 => grp_fu_159_p1,
        ce => grp_fu_159_ce,
        dout => grp_fu_159_p2);

    emtfptnn_mul_24s_13ns_36_4_0_U159 : component emtfptnn_mul_24s_13ns_36_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 13,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_5_V_read_int_reg,
        din1 => grp_fu_160_p1,
        ce => grp_fu_160_ce,
        dout => grp_fu_160_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U160 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_1_V_read_int_reg,
        din1 => grp_fu_161_p1,
        ce => grp_fu_161_ce,
        dout => grp_fu_161_p2);

    emtfptnn_mul_24s_13ns_36_4_0_U161 : component emtfptnn_mul_24s_13ns_36_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 13,
        dout_WIDTH => 36)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_8_V_read_int_reg,
        din1 => grp_fu_162_p1,
        ce => grp_fu_162_ce,
        dout => grp_fu_162_p2);

    emtfptnn_mul_24s_14ns_37_4_0_U162 : component emtfptnn_mul_24s_14ns_37_4_0
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 24,
        din1_WIDTH => 14,
        dout_WIDTH => 37)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_9_V_read_int_reg,
        din1 => grp_fu_163_p1,
        ce => grp_fu_163_ce,
        dout => grp_fu_163_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_0_int_reg <= add_ln1192_fu_685_p2(36 downto 13);
                ap_return_1_int_reg <= add_ln1192_15_fu_700_p2(36 downto 13);
                ap_return_2_int_reg <= add_ln1192_16_fu_715_p2(36 downto 13);
                ap_return_3_int_reg <= add_ln1192_17_fu_730_p2(36 downto 13);
                ap_return_4_int_reg <= sext_ln708_fu_760_p1;
                ap_return_5_int_reg <= sext_ln708_11_fu_779_p1;
                ap_return_6_int_reg <= add_ln1192_20_fu_783_p2(36 downto 13);
                ap_return_7_int_reg <= add_ln1192_21_fu_798_p2(36 downto 13);
                ap_return_8_int_reg <= sext_ln708_12_fu_828_p1;
                ap_return_9_int_reg <= add_ln1192_23_fu_832_p2(36 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                data_0_V_read_int_reg <= data_0_V_read;
                data_1_V_read_int_reg <= data_1_V_read;
                data_2_V_read_int_reg <= data_2_V_read;
                data_3_V_read_int_reg <= data_3_V_read;
                data_4_V_read_int_reg <= data_4_V_read;
                data_5_V_read_int_reg <= data_5_V_read;
                data_6_V_read_int_reg <= data_6_V_read;
                data_7_V_read_int_reg <= data_7_V_read;
                data_8_V_read_int_reg <= data_8_V_read;
                data_9_V_read_int_reg <= data_9_V_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                mul_ln1192_14_reg_977 <= grp_fu_156_p2;
                mul_ln1192_15_reg_982 <= grp_fu_160_p2;
                mul_ln1192_16_reg_997 <= grp_fu_162_p2;
                mul_ln1192_3_reg_962 <= grp_fu_161_p2;
                mul_ln1192_4_reg_967 <= grp_fu_155_p2;
                mul_ln1192_5_reg_972 <= grp_fu_158_p2;
                mul_ln1192_6_reg_987 <= grp_fu_157_p2;
                mul_ln1192_7_reg_992 <= grp_fu_159_p2;
                mul_ln1192_8_reg_1002 <= grp_fu_163_p2;
                mul_ln1192_reg_957 <= grp_fu_154_p2;
            end if;
        end if;
    end process;
    add_ln1192_15_fu_700_p2 <= std_logic_vector(unsigned(mul_ln1192_3_reg_962) + unsigned(ap_const_lv37_1FF68E4000));
    add_ln1192_16_fu_715_p2 <= std_logic_vector(unsigned(mul_ln1192_4_reg_967) + unsigned(ap_const_lv37_1FF057C000));
    add_ln1192_17_fu_730_p2 <= std_logic_vector(unsigned(mul_ln1192_5_reg_972) + unsigned(ap_const_lv37_1FF9DBA000));
    add_ln1192_18_fu_745_p2 <= std_logic_vector(unsigned(mul_ln1192_14_reg_977) + unsigned(ap_const_lv36_FF16CE000));
    add_ln1192_19_fu_764_p2 <= std_logic_vector(unsigned(mul_ln1192_15_reg_982) + unsigned(ap_const_lv36_FF76D0000));
    add_ln1192_20_fu_783_p2 <= std_logic_vector(unsigned(mul_ln1192_6_reg_987) + unsigned(ap_const_lv37_155C000));
    add_ln1192_21_fu_798_p2 <= std_logic_vector(unsigned(mul_ln1192_7_reg_992) + unsigned(ap_const_lv37_512A000));
    add_ln1192_22_fu_813_p2 <= std_logic_vector(unsigned(mul_ln1192_16_reg_997) + unsigned(ap_const_lv36_5B26000));
    add_ln1192_23_fu_832_p2 <= std_logic_vector(unsigned(mul_ln1192_8_reg_1002) + unsigned(ap_const_lv37_1FF461A000));
    add_ln1192_fu_685_p2 <= std_logic_vector(unsigned(mul_ln1192_reg_957) + unsigned(ap_const_lv37_1D10000));
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_0_assign_proc : process(add_ln1192_fu_685_p2, ap_ce_reg, ap_return_0_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_0 <= ap_return_0_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_0 <= add_ln1192_fu_685_p2(36 downto 13);
        end if; 
    end process;


    ap_return_1_assign_proc : process(add_ln1192_15_fu_700_p2, ap_ce_reg, ap_return_1_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_1 <= ap_return_1_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_1 <= add_ln1192_15_fu_700_p2(36 downto 13);
        end if; 
    end process;


    ap_return_2_assign_proc : process(add_ln1192_16_fu_715_p2, ap_ce_reg, ap_return_2_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_2 <= ap_return_2_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_2 <= add_ln1192_16_fu_715_p2(36 downto 13);
        end if; 
    end process;


    ap_return_3_assign_proc : process(add_ln1192_17_fu_730_p2, ap_ce_reg, ap_return_3_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_3 <= ap_return_3_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_3 <= add_ln1192_17_fu_730_p2(36 downto 13);
        end if; 
    end process;


    ap_return_4_assign_proc : process(sext_ln708_fu_760_p1, ap_ce_reg, ap_return_4_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_4 <= ap_return_4_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_4 <= sext_ln708_fu_760_p1;
        end if; 
    end process;


    ap_return_5_assign_proc : process(sext_ln708_11_fu_779_p1, ap_ce_reg, ap_return_5_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_5 <= ap_return_5_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_5 <= sext_ln708_11_fu_779_p1;
        end if; 
    end process;


    ap_return_6_assign_proc : process(add_ln1192_20_fu_783_p2, ap_ce_reg, ap_return_6_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_6 <= ap_return_6_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_6 <= add_ln1192_20_fu_783_p2(36 downto 13);
        end if; 
    end process;


    ap_return_7_assign_proc : process(add_ln1192_21_fu_798_p2, ap_ce_reg, ap_return_7_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_7 <= ap_return_7_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_7 <= add_ln1192_21_fu_798_p2(36 downto 13);
        end if; 
    end process;


    ap_return_8_assign_proc : process(sext_ln708_12_fu_828_p1, ap_ce_reg, ap_return_8_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_8 <= ap_return_8_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_8 <= sext_ln708_12_fu_828_p1;
        end if; 
    end process;


    ap_return_9_assign_proc : process(add_ln1192_23_fu_832_p2, ap_ce_reg, ap_return_9_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return_9 <= ap_return_9_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return_9 <= add_ln1192_23_fu_832_p2(36 downto 13);
        end if; 
    end process;


    grp_fu_154_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_154_ce <= ap_const_logic_1;
        else 
            grp_fu_154_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_154_p1 <= ap_const_lv37_1B40(14 - 1 downto 0);

    grp_fu_155_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_155_ce <= ap_const_logic_1;
        else 
            grp_fu_155_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_155_p1 <= ap_const_lv37_1687(14 - 1 downto 0);

    grp_fu_156_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_156_ce <= ap_const_logic_1;
        else 
            grp_fu_156_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_156_p1 <= ap_const_lv36_F1D(13 - 1 downto 0);

    grp_fu_157_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_157_ce <= ap_const_logic_1;
        else 
            grp_fu_157_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_157_p1 <= ap_const_lv37_1390(14 - 1 downto 0);

    grp_fu_158_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_158_ce <= ap_const_logic_1;
        else 
            grp_fu_158_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_158_p1 <= ap_const_lv37_1706(14 - 1 downto 0);

    grp_fu_159_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_159_ce <= ap_const_logic_1;
        else 
            grp_fu_159_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_159_p1 <= ap_const_lv37_1217(14 - 1 downto 0);

    grp_fu_160_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_160_ce <= ap_const_logic_1;
        else 
            grp_fu_160_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_160_p1 <= ap_const_lv36_CDE(13 - 1 downto 0);

    grp_fu_161_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_161_ce <= ap_const_logic_1;
        else 
            grp_fu_161_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_161_p1 <= ap_const_lv37_19F8(14 - 1 downto 0);

    grp_fu_162_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_162_ce <= ap_const_logic_1;
        else 
            grp_fu_162_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_162_p1 <= ap_const_lv36_E86(13 - 1 downto 0);

    grp_fu_163_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_163_ce <= ap_const_logic_1;
        else 
            grp_fu_163_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_163_p1 <= ap_const_lv37_10D7(14 - 1 downto 0);
        sext_ln708_11_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_119_fu_769_p4),24));

        sext_ln708_12_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_120_fu_818_p4),24));

        sext_ln708_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_118_fu_750_p4),24));

    tmp_118_fu_750_p4 <= add_ln1192_18_fu_745_p2(35 downto 13);
    tmp_119_fu_769_p4 <= add_ln1192_19_fu_764_p2(35 downto 13);
    tmp_120_fu_818_p4 <= add_ln1192_22_fu_813_p2(35 downto 13);
end behav;
