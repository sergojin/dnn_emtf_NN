-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity compute_layer_0_0_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_16_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_17_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_18_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    data_19_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
    ap_ce : IN STD_LOGIC );
end;


architecture behav of compute_layer_0_0_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv34_3FFFF89DA : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111000100111011010";
    constant ap_const_lv32_FFFFE0E8 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111110000011101000";
    constant ap_const_lv34_161C7 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010110000111000111";
    constant ap_const_lv34_16E19 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010110111000011001";
    constant ap_const_lv34_9F2A : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000001001111100101010";
    constant ap_const_lv34_3FFFF5CE6 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111110101110011100110";
    constant ap_const_lv31_D5E : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000110101011110";
    constant ap_const_lv33_1FFFFC383 : STD_LOGIC_VECTOR (32 downto 0) := "111111111111111111100001110000011";
    constant ap_const_lv34_3FFFEC071 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111101100000001110001";
    constant ap_const_lv34_3FFFFAEA9 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111010111010101001";
    constant ap_const_lv34_3FFFEDD2B : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111101101110100101011";
    constant ap_const_lv34_44FB : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000000100010011111011";
    constant ap_const_lv34_3FFFF98B8 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111111001100010111000";
    constant ap_const_lv34_3FFFEC7A0 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111101100011110100000";
    constant ap_const_lv30_3FFFF98B : STD_LOGIC_VECTOR (29 downto 0) := "111111111111111111100110001011";
    constant ap_const_lv34_16076 : STD_LOGIC_VECTOR (33 downto 0) := "0000000000000000010110000001110110";
    constant ap_const_lv33_27C1 : STD_LOGIC_VECTOR (32 downto 0) := "000000000000000000010011111000001";
    constant ap_const_lv34_3FFFEF001 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111101111000000000001";
    constant ap_const_lv34_3FFFF1384 : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111110001001110000100";
    constant ap_const_lv34_3FFFEE03F : STD_LOGIC_VECTOR (33 downto 0) := "1111111111111111101110000000111111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv22_2E5B : STD_LOGIC_VECTOR (21 downto 0) := "0000000010111001011011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";

    signal data_18_V_read19_reg_2214 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_12_V_read13_reg_2219 : STD_LOGIC_VECTOR (17 downto 0);
    signal data_2_V_read_11_reg_2224 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_123_cast_reg_2314 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_1_cast_reg_2319 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_3_cast_reg_2329 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_4_cast_reg_2334 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_5_cast_reg_2339 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_6_cast_reg_2344 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_s_reg_2349 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_123_8_cast_reg_2354 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_9_cast_reg_2359 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_cast_62_reg_2364 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_10_cast_reg_2369 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_12_cast_reg_2379 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_88_reg_2384 : STD_LOGIC_VECTOR (20 downto 0);
    signal tmp_123_14_cast_reg_2389 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_15_cast_reg_2394 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_16_cast_reg_2399 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_18_cast_reg_2409 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_2_cast_reg_2414 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_11_cast_reg_2419 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_17_cast_reg_2424 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp3_fu_2114_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp3_reg_2429 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp5_fu_2118_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp5_reg_2434 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp7_fu_2122_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp7_reg_2439 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp7_reg_2439_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp8_fu_2130_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp8_reg_2444 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp8_reg_2444_pp0_iter3_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp12_fu_2136_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp12_reg_2449 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp14_fu_2140_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp14_reg_2454 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp16_fu_2149_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp16_reg_2459 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp19_fu_2154_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp19_reg_2464 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp2_fu_2163_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp2_reg_2469 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp11_fu_2172_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp11_reg_2474 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp11_reg_2474_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp15_fu_2181_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp15_reg_2479 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp15_reg_2479_pp0_iter4_reg : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp1_fu_2190_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp1_reg_2484 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_254_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_255_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_256_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_257_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_258_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_259_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_260_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_261_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_262_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_264_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_265_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_266_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_267_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_268_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_269_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_270_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_272_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_273_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_266_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_265_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_267_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_256_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_264_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_259_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_268_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_254_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_270_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_273_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_257_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_260_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_272_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_255_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_262_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_261_p2 : STD_LOGIC_VECTOR (32 downto 0);
    signal grp_fu_258_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal grp_fu_269_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal tmp_123_7_cast_fu_2088_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp9_fu_2126_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_123_13_cast_fu_2101_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp17_fu_2145_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp4_fu_2159_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp13_fu_2168_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp18_fu_2177_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp6_fu_2186_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp10_fu_2195_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Val2_36_s_fu_2199_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_254_ce : STD_LOGIC;
    signal grp_fu_255_ce : STD_LOGIC;
    signal grp_fu_256_ce : STD_LOGIC;
    signal grp_fu_257_ce : STD_LOGIC;
    signal grp_fu_258_ce : STD_LOGIC;
    signal grp_fu_259_ce : STD_LOGIC;
    signal grp_fu_260_ce : STD_LOGIC;
    signal grp_fu_261_ce : STD_LOGIC;
    signal grp_fu_262_ce : STD_LOGIC;
    signal grp_fu_263_ce : STD_LOGIC;
    signal grp_fu_264_ce : STD_LOGIC;
    signal grp_fu_265_ce : STD_LOGIC;
    signal grp_fu_266_ce : STD_LOGIC;
    signal grp_fu_267_ce : STD_LOGIC;
    signal grp_fu_268_ce : STD_LOGIC;
    signal grp_fu_269_ce : STD_LOGIC;
    signal grp_fu_270_ce : STD_LOGIC;
    signal grp_fu_271_ce : STD_LOGIC;
    signal grp_fu_272_ce : STD_LOGIC;
    signal grp_fu_273_ce : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;
    signal data_0_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_1_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_2_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_3_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_4_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_5_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_6_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_7_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_8_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_9_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_10_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_11_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_12_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_13_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_14_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_15_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_16_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_17_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_18_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal data_19_V_read_int_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_return_int_reg : STD_LOGIC_VECTOR (17 downto 0);

    component myproject_mul_18swdI IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18sDeQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_mul_18srcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18sqcK IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18socq IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18syd2 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component myproject_mul_18smb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;


    component myproject_mul_18sFfa IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18sncg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component myproject_mul_18spcA IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component myproject_mul_18ssc4 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (14 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (32 downto 0) );
    end component;



begin
    myproject_mul_18swdI_U2387 : component myproject_mul_18swdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_8_V_read_int_reg,
        din1 => grp_fu_254_p1,
        ce => grp_fu_254_ce,
        dout => grp_fu_254_p2);

    myproject_mul_18sDeQ_U2388 : component myproject_mul_18sDeQ
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 14,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_17_V_read_int_reg,
        din1 => grp_fu_255_p1,
        ce => grp_fu_255_ce,
        dout => grp_fu_255_p2);

    myproject_mul_18srcU_U2389 : component myproject_mul_18srcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_4_V_read_int_reg,
        din1 => grp_fu_256_p1,
        ce => grp_fu_256_ce,
        dout => grp_fu_256_p2);

    myproject_mul_18srcU_U2390 : component myproject_mul_18srcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_13_V_read_int_reg,
        din1 => grp_fu_257_p1,
        ce => grp_fu_257_ce,
        dout => grp_fu_257_p2);

    myproject_mul_18sqcK_U2391 : component myproject_mul_18sqcK
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_12_V_read13_reg_2219,
        din1 => grp_fu_258_p1,
        ce => grp_fu_258_ce,
        dout => grp_fu_258_p2);

    myproject_mul_18socq_U2392 : component myproject_mul_18socq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_6_V_read_int_reg,
        din1 => grp_fu_259_p1,
        ce => grp_fu_259_ce,
        dout => grp_fu_259_p2);

    myproject_mul_18syd2_U2393 : component myproject_mul_18syd2
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 13,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_14_V_read_int_reg,
        din1 => grp_fu_260_p1,
        ce => grp_fu_260_ce,
        dout => grp_fu_260_p2);

    myproject_mul_18smb6_U2394 : component myproject_mul_18smb6
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_2_V_read_11_reg_2224,
        din1 => grp_fu_261_p1,
        ce => grp_fu_261_ce,
        dout => grp_fu_261_p2);

    myproject_mul_18sFfa_U2395 : component myproject_mul_18sFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_19_V_read_int_reg,
        din1 => grp_fu_262_p1,
        ce => grp_fu_262_ce,
        dout => grp_fu_262_p2);

    myproject_mul_18swdI_U2396 : component myproject_mul_18swdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_9_V_read_int_reg,
        din1 => grp_fu_263_p1,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);

    myproject_mul_18sFfa_U2397 : component myproject_mul_18sFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_5_V_read_int_reg,
        din1 => grp_fu_264_p1,
        ce => grp_fu_264_ce,
        dout => grp_fu_264_p2);

    myproject_mul_18sncg_U2398 : component myproject_mul_18sncg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_1_V_read_int_reg,
        din1 => grp_fu_265_p1,
        ce => grp_fu_265_ce,
        dout => grp_fu_265_p2);

    myproject_mul_18swdI_U2399 : component myproject_mul_18swdI
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 16,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_0_V_read_int_reg,
        din1 => grp_fu_266_p1,
        ce => grp_fu_266_ce,
        dout => grp_fu_266_p2);

    myproject_mul_18sFfa_U2400 : component myproject_mul_18sFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_3_V_read_int_reg,
        din1 => grp_fu_267_p1,
        ce => grp_fu_267_ce,
        dout => grp_fu_267_p2);

    myproject_mul_18spcA_U2401 : component myproject_mul_18spcA
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 12,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_7_V_read_int_reg,
        din1 => grp_fu_268_p1,
        ce => grp_fu_268_ce,
        dout => grp_fu_268_p2);

    myproject_mul_18srcU_U2402 : component myproject_mul_18srcU
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_18_V_read19_reg_2214,
        din1 => grp_fu_269_p1,
        ce => grp_fu_269_ce,
        dout => grp_fu_269_p2);

    myproject_mul_18ssc4_U2403 : component myproject_mul_18ssc4
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 15,
        dout_WIDTH => 33)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_10_V_read_int_reg,
        din1 => grp_fu_270_p1,
        ce => grp_fu_270_ce,
        dout => grp_fu_270_p2);

    myproject_mul_18sFfa_U2404 : component myproject_mul_18sFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_15_V_read_int_reg,
        din1 => grp_fu_271_p1,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    myproject_mul_18socq_U2405 : component myproject_mul_18socq
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 17,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_16_V_read_int_reg,
        din1 => grp_fu_272_p1,
        ce => grp_fu_272_ce,
        dout => grp_fu_272_p2);

    myproject_mul_18sFfa_U2406 : component myproject_mul_18sFfa
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => data_11_V_read_int_reg,
        din1 => grp_fu_273_p1,
        ce => grp_fu_273_ce,
        dout => grp_fu_273_p2);





    ap_ce_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            ap_ce_reg <= ap_ce;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce_reg)) then
                ap_return_int_reg <= p_Val2_36_s_fu_2199_p2(21 downto 4);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_ce)) then
                data_0_V_read_int_reg <= data_0_V_read;
                data_10_V_read_int_reg <= data_10_V_read;
                data_11_V_read_int_reg <= data_11_V_read;
                data_12_V_read_int_reg <= data_12_V_read;
                data_13_V_read_int_reg <= data_13_V_read;
                data_14_V_read_int_reg <= data_14_V_read;
                data_15_V_read_int_reg <= data_15_V_read;
                data_16_V_read_int_reg <= data_16_V_read;
                data_17_V_read_int_reg <= data_17_V_read;
                data_18_V_read_int_reg <= data_18_V_read;
                data_19_V_read_int_reg <= data_19_V_read;
                data_1_V_read_int_reg <= data_1_V_read;
                data_2_V_read_int_reg <= data_2_V_read;
                data_3_V_read_int_reg <= data_3_V_read;
                data_4_V_read_int_reg <= data_4_V_read;
                data_5_V_read_int_reg <= data_5_V_read;
                data_6_V_read_int_reg <= data_6_V_read;
                data_7_V_read_int_reg <= data_7_V_read;
                data_8_V_read_int_reg <= data_8_V_read;
                data_9_V_read_int_reg <= data_9_V_read;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce_reg) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                data_12_V_read13_reg_2219 <= data_12_V_read_int_reg;
                data_18_V_read19_reg_2214 <= data_18_V_read_int_reg;
                data_2_V_read_11_reg_2224 <= data_2_V_read_int_reg;
                tmp11_reg_2474 <= tmp11_fu_2172_p2;
                tmp11_reg_2474_pp0_iter4_reg <= tmp11_reg_2474;
                tmp12_reg_2449 <= tmp12_fu_2136_p2;
                tmp14_reg_2454 <= tmp14_fu_2140_p2;
                tmp15_reg_2479 <= tmp15_fu_2181_p2;
                tmp15_reg_2479_pp0_iter4_reg <= tmp15_reg_2479;
                tmp16_reg_2459 <= tmp16_fu_2149_p2;
                tmp19_reg_2464 <= tmp19_fu_2154_p2;
                tmp1_reg_2484 <= tmp1_fu_2190_p2;
                tmp2_reg_2469 <= tmp2_fu_2163_p2;
                tmp3_reg_2429 <= tmp3_fu_2114_p2;
                tmp5_reg_2434 <= tmp5_fu_2118_p2;
                tmp7_reg_2439 <= tmp7_fu_2122_p2;
                tmp7_reg_2439_pp0_iter3_reg <= tmp7_reg_2439;
                tmp8_reg_2444 <= tmp8_fu_2130_p2;
                tmp8_reg_2444_pp0_iter3_reg <= tmp8_reg_2444;
                tmp_123_10_cast_reg_2369 <= grp_fu_273_p2(31 downto 10);
                tmp_123_11_cast_reg_2419 <= grp_fu_258_p2(31 downto 10);
                tmp_123_12_cast_reg_2379 <= grp_fu_257_p2(31 downto 10);
                tmp_123_14_cast_reg_2389 <= grp_fu_271_p2(31 downto 10);
                tmp_123_15_cast_reg_2394 <= grp_fu_272_p2(31 downto 10);
                tmp_123_16_cast_reg_2399 <= grp_fu_255_p2(31 downto 10);
                tmp_123_17_cast_reg_2424 <= grp_fu_269_p2(31 downto 10);
                tmp_123_18_cast_reg_2409 <= grp_fu_262_p2(31 downto 10);
                tmp_123_1_cast_reg_2319 <= grp_fu_265_p2(31 downto 10);
                tmp_123_2_cast_reg_2414 <= grp_fu_261_p2(31 downto 10);
                tmp_123_3_cast_reg_2329 <= grp_fu_267_p2(31 downto 10);
                tmp_123_4_cast_reg_2334 <= grp_fu_256_p2(31 downto 10);
                tmp_123_5_cast_reg_2339 <= grp_fu_264_p2(31 downto 10);
                tmp_123_6_cast_reg_2344 <= grp_fu_259_p2(31 downto 10);
                tmp_123_8_cast_reg_2354 <= grp_fu_254_p2(31 downto 10);
                tmp_123_9_cast_reg_2359 <= grp_fu_263_p2(31 downto 10);
                tmp_123_cast_62_reg_2364 <= grp_fu_270_p2(31 downto 10);
                tmp_123_cast_reg_2314 <= grp_fu_266_p2(31 downto 10);
                tmp_88_reg_2384 <= grp_fu_260_p2(30 downto 10);
                tmp_s_reg_2349 <= grp_fu_268_p2(29 downto 10);
            end if;
        end if;
    end process;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_return_assign_proc : process(p_Val2_36_s_fu_2199_p2, ap_ce_reg, ap_return_int_reg)
    begin
        if ((ap_const_logic_0 = ap_ce_reg)) then 
            ap_return <= ap_return_int_reg;
        elsif ((ap_const_logic_1 = ap_ce_reg)) then 
            ap_return <= p_Val2_36_s_fu_2199_p2(21 downto 4);
        end if; 
    end process;


    grp_fu_254_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_254_ce <= ap_const_logic_1;
        else 
            grp_fu_254_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_254_p1 <= ap_const_lv34_3FFFF89DA(16 - 1 downto 0);

    grp_fu_255_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_255_ce <= ap_const_logic_1;
        else 
            grp_fu_255_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_255_p1 <= ap_const_lv32_FFFFE0E8(14 - 1 downto 0);

    grp_fu_256_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_256_ce <= ap_const_logic_1;
        else 
            grp_fu_256_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_256_p1 <= ap_const_lv34_161C7(18 - 1 downto 0);

    grp_fu_257_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_257_ce <= ap_const_logic_1;
        else 
            grp_fu_257_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_257_p1 <= ap_const_lv34_16E19(18 - 1 downto 0);

    grp_fu_258_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_258_ce <= ap_const_logic_1;
        else 
            grp_fu_258_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_258_p1 <= ap_const_lv34_9F2A(17 - 1 downto 0);

    grp_fu_259_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_259_ce <= ap_const_logic_1;
        else 
            grp_fu_259_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_259_p1 <= ap_const_lv34_3FFFF5CE6(17 - 1 downto 0);

    grp_fu_260_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_260_ce <= ap_const_logic_1;
        else 
            grp_fu_260_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_260_p1 <= ap_const_lv31_D5E(13 - 1 downto 0);

    grp_fu_261_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_261_ce <= ap_const_logic_1;
        else 
            grp_fu_261_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_261_p1 <= ap_const_lv33_1FFFFC383(15 - 1 downto 0);

    grp_fu_262_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_262_ce <= ap_const_logic_1;
        else 
            grp_fu_262_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_262_p1 <= ap_const_lv34_3FFFEC071(18 - 1 downto 0);

    grp_fu_263_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_263_p1 <= ap_const_lv34_3FFFFAEA9(16 - 1 downto 0);

    grp_fu_264_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_264_ce <= ap_const_logic_1;
        else 
            grp_fu_264_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_264_p1 <= ap_const_lv34_3FFFEDD2B(18 - 1 downto 0);

    grp_fu_265_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_265_ce <= ap_const_logic_1;
        else 
            grp_fu_265_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_265_p1 <= ap_const_lv34_44FB(16 - 1 downto 0);

    grp_fu_266_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_266_ce <= ap_const_logic_1;
        else 
            grp_fu_266_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_266_p1 <= ap_const_lv34_3FFFF98B8(16 - 1 downto 0);

    grp_fu_267_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_267_ce <= ap_const_logic_1;
        else 
            grp_fu_267_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_267_p1 <= ap_const_lv34_3FFFEC7A0(18 - 1 downto 0);

    grp_fu_268_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_268_ce <= ap_const_logic_1;
        else 
            grp_fu_268_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_268_p1 <= ap_const_lv30_3FFFF98B(12 - 1 downto 0);

    grp_fu_269_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_269_ce <= ap_const_logic_1;
        else 
            grp_fu_269_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_269_p1 <= ap_const_lv34_16076(18 - 1 downto 0);

    grp_fu_270_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_270_ce <= ap_const_logic_1;
        else 
            grp_fu_270_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_270_p1 <= ap_const_lv33_27C1(15 - 1 downto 0);

    grp_fu_271_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_271_ce <= ap_const_logic_1;
        else 
            grp_fu_271_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_271_p1 <= ap_const_lv34_3FFFEF001(18 - 1 downto 0);

    grp_fu_272_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_272_ce <= ap_const_logic_1;
        else 
            grp_fu_272_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_272_p1 <= ap_const_lv34_3FFFF1384(17 - 1 downto 0);

    grp_fu_273_ce_assign_proc : process(ap_block_pp0_stage0_11001, ap_ce_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce_reg))) then 
            grp_fu_273_ce <= ap_const_logic_1;
        else 
            grp_fu_273_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_273_p1 <= ap_const_lv34_3FFFEE03F(18 - 1 downto 0);
    p_Val2_36_s_fu_2199_p2 <= std_logic_vector(unsigned(tmp1_reg_2484) + unsigned(tmp10_fu_2195_p2));
    tmp10_fu_2195_p2 <= std_logic_vector(unsigned(tmp11_reg_2474_pp0_iter4_reg) + unsigned(tmp15_reg_2479_pp0_iter4_reg));
    tmp11_fu_2172_p2 <= std_logic_vector(unsigned(tmp12_reg_2449) + unsigned(tmp13_fu_2168_p2));
    tmp12_fu_2136_p2 <= std_logic_vector(unsigned(tmp_123_10_cast_reg_2369) + unsigned(tmp_123_cast_62_reg_2364));
    tmp13_fu_2168_p2 <= std_logic_vector(unsigned(tmp_123_11_cast_reg_2419) + unsigned(tmp14_reg_2454));
    tmp14_fu_2140_p2 <= std_logic_vector(signed(tmp_123_13_cast_fu_2101_p1) + signed(tmp_123_12_cast_reg_2379));
    tmp15_fu_2181_p2 <= std_logic_vector(unsigned(tmp16_reg_2459) + unsigned(tmp18_fu_2177_p2));
    tmp16_fu_2149_p2 <= std_logic_vector(unsigned(tmp_123_14_cast_reg_2389) + unsigned(tmp17_fu_2145_p2));
    tmp17_fu_2145_p2 <= std_logic_vector(unsigned(tmp_123_16_cast_reg_2399) + unsigned(tmp_123_15_cast_reg_2394));
    tmp18_fu_2177_p2 <= std_logic_vector(unsigned(tmp_123_17_cast_reg_2424) + unsigned(tmp19_reg_2464));
    tmp19_fu_2154_p2 <= std_logic_vector(unsigned(tmp_123_18_cast_reg_2409) + unsigned(ap_const_lv22_2E5B));
    tmp1_fu_2190_p2 <= std_logic_vector(unsigned(tmp2_reg_2469) + unsigned(tmp6_fu_2186_p2));
    tmp2_fu_2163_p2 <= std_logic_vector(unsigned(tmp3_reg_2429) + unsigned(tmp4_fu_2159_p2));
    tmp3_fu_2114_p2 <= std_logic_vector(unsigned(tmp_123_1_cast_reg_2319) + unsigned(tmp_123_cast_reg_2314));
    tmp4_fu_2159_p2 <= std_logic_vector(unsigned(tmp_123_2_cast_reg_2414) + unsigned(tmp5_reg_2434));
    tmp5_fu_2118_p2 <= std_logic_vector(unsigned(tmp_123_4_cast_reg_2334) + unsigned(tmp_123_3_cast_reg_2329));
    tmp6_fu_2186_p2 <= std_logic_vector(unsigned(tmp7_reg_2439_pp0_iter3_reg) + unsigned(tmp8_reg_2444_pp0_iter3_reg));
    tmp7_fu_2122_p2 <= std_logic_vector(unsigned(tmp_123_6_cast_reg_2344) + unsigned(tmp_123_5_cast_reg_2339));
    tmp8_fu_2130_p2 <= std_logic_vector(signed(tmp_123_7_cast_fu_2088_p1) + signed(tmp9_fu_2126_p2));
    tmp9_fu_2126_p2 <= std_logic_vector(unsigned(tmp_123_9_cast_reg_2359) + unsigned(tmp_123_8_cast_reg_2354));
        tmp_123_13_cast_fu_2101_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_88_reg_2384),22));

        tmp_123_7_cast_fu_2088_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_2349),22));

end behav;
