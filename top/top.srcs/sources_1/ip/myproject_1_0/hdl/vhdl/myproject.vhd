-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.1
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_ap_vld : IN STD_LOGIC;
    data_V : IN STD_LOGIC_VECTOR (1439 downto 0);
    res_V : OUT STD_LOGIC_VECTOR (35 downto 0);
    res_V_ap_vld : OUT STD_LOGIC;
    const_size_in : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_ap_vld : OUT STD_LOGIC;
    const_size_out : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2018_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7vx690tffg1927-2,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.491812,HLS_SYN_LAT=43,HLS_SYN_TPT=1,HLS_SYN_MEM=33,HLS_SYN_DSP=3097,HLS_SYN_FF=331364,HLS_SYN_LUT=90900}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1440_lc_1 : STD_LOGIC_VECTOR (1439 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_50 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001010000";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter34 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter35 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter36 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter37 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter38 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter39 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter40 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter41 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter42 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter43 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal data_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter34 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter35 : BOOLEAN;
    signal ap_block_state37_pp0_stage0_iter36 : BOOLEAN;
    signal ap_block_state38_pp0_stage0_iter37 : BOOLEAN;
    signal ap_block_state39_pp0_stage0_iter38 : BOOLEAN;
    signal ap_block_state40_pp0_stage0_iter39 : BOOLEAN;
    signal ap_block_state41_pp0_stage0_iter40 : BOOLEAN;
    signal ap_block_state42_pp0_stage0_iter41 : BOOLEAN;
    signal ap_block_state43_pp0_stage0_iter42 : BOOLEAN;
    signal ap_block_state44_pp0_stage0_iter43 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal data_V_preg : STD_LOGIC_VECTOR (1439 downto
    signal data_V_in_sig : STD_LOGIC_VECTOR (1439 downto 0);
    signal data_V_ap_vld_preg : STD_LOGIC := '0';
    signal data_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal logits1_0_V_reg_855 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_1_V_reg_860 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_2_V_reg_865 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_3_V_reg_870 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_4_V_reg_875 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_5_V_reg_880 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_6_V_reg_885 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_7_V_reg_890 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_8_V_reg_895 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_9_V_reg_900 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_10_V_reg_905 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_11_V_reg_910 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_12_V_reg_915 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_13_V_reg_920 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_14_V_reg_925 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_15_V_reg_930 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_16_V_reg_935 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_17_V_reg_940 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_18_V_reg_945 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_19_V_reg_950 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_20_V_reg_955 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_21_V_reg_960 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_22_V_reg_965 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_23_V_reg_970 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_24_V_reg_975 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_25_V_reg_980 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_26_V_reg_985 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_27_V_reg_990 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_28_V_reg_995 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_29_V_reg_1000 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_30_V_reg_1005 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits1_31_V_reg_1010 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_0_V_reg_1015 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_1_V_reg_1020 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_2_V_reg_1025 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_3_V_reg_1030 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_4_V_reg_1035 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_5_V_reg_1040 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_6_V_reg_1045 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_7_V_reg_1050 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_8_V_reg_1055 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_9_V_reg_1060 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_10_V_reg_1065 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_11_V_reg_1070 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_12_V_reg_1075 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_13_V_reg_1080 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_14_V_reg_1085 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_15_V_reg_1090 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_16_V_reg_1095 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_17_V_reg_1100 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_18_V_reg_1105 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_19_V_reg_1110 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_20_V_reg_1115 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_21_V_reg_1120 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_22_V_reg_1125 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_23_V_reg_1130 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_24_V_reg_1135 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_25_V_reg_1140 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_26_V_reg_1145 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_27_V_reg_1150 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_28_V_reg_1155 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_29_V_reg_1160 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_30_V_reg_1165 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer1_out_31_V_reg_1170 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_0_V_reg_1175 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_1_V_reg_1180 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_2_V_reg_1185 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_3_V_reg_1190 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_4_V_reg_1195 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_5_V_reg_1200 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_6_V_reg_1205 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_7_V_reg_1210 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_8_V_reg_1215 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_9_V_reg_1220 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_10_V_reg_1225 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_11_V_reg_1230 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_12_V_reg_1235 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_13_V_reg_1240 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_14_V_reg_1245 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits2_15_V_reg_1250 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_0_V_reg_1255 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_1_V_reg_1260 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_2_V_reg_1265 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_3_V_reg_1270 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_4_V_reg_1275 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_5_V_reg_1280 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_6_V_reg_1285 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_7_V_reg_1290 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_8_V_reg_1295 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_9_V_reg_1300 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_10_V_reg_1305 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_11_V_reg_1310 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_12_V_reg_1315 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_13_V_reg_1320 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_14_V_reg_1325 : STD_LOGIC_VECTOR (17 downto 0);
    signal layer2_out_15_V_reg_1330 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_0_V_reg_1335 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_1_V_reg_1340 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_2_V_reg_1345 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_3_V_reg_1350 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_4_V_reg_1355 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_5_V_reg_1360 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_6_V_reg_1365 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_7_V_reg_1370 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_8_V_reg_1375 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_9_V_reg_1380 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_10_V_reg_1385 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_11_V_reg_1390 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_12_V_reg_1395 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_13_V_reg_1400 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_14_V_reg_1405 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits3_15_V_reg_1410 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_fu_261_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal logits5_0_V_reg_1511 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_1_fu_241_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal logits4_0_V_reg_1516 : STD_LOGIC_VECTOR (17 downto 0);
    signal logits4_0_V_reg_1516_pp0_iter41_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal logits4_0_V_reg_1516_pp0_iter42_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_16 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_17 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_18 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_19 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_21 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_22 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_23 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_24 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_25 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_26 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_27 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_28 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_29 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_30 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_return_31 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_2_fu_97_ap_ce : STD_LOGIC;
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_1_fu_103_ap_ce : STD_LOGIC;
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_0_s_fu_139_ap_ce : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_start : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_done : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_idle : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_ready : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_ce : STD_LOGIC;
    signal grp_tanh_2_fu_159_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_16 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_17 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_18 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_19 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_20 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_21 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_22 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_23 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_24 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_25 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_26 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_27 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_28 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_29 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_30 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_return_31 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_start : STD_LOGIC;
    signal grp_tanh_1_fu_197_ap_done : STD_LOGIC;
    signal grp_tanh_1_fu_197_ap_idle : STD_LOGIC;
    signal grp_tanh_1_fu_197_ap_ready : STD_LOGIC;
    signal grp_tanh_1_fu_197_ap_ce : STD_LOGIC;
    signal grp_tanh_1_fu_197_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_1_fu_197_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_start : STD_LOGIC;
    signal grp_tanh_fu_219_ap_done : STD_LOGIC;
    signal grp_tanh_fu_219_ap_idle : STD_LOGIC;
    signal grp_tanh_fu_219_ap_ready : STD_LOGIC;
    signal grp_tanh_fu_219_ap_ce : STD_LOGIC;
    signal grp_tanh_fu_219_ap_return_0 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_2 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_3 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_4 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_5 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_6 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_7 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_8 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_9 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_10 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_11 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_12 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_13 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_14 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_fu_219_ap_return_15 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_compute_layer_0_0_1_fu_241_ap_ce : STD_LOGIC;
    signal grp_compute_layer_0_0_fu_261_ap_ce : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_start : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_done : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_idle : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_ready : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_ce : STD_LOGIC;
    signal grp_sigmoid_fu_281_ap_return : STD_LOGIC_VECTOR (11 downto 0);
    signal layer4_out_0_V_linear_fu_288_ap_ready : STD_LOGIC;
    signal layer4_out_0_V_linear_fu_288_ap_return : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_tanh_2_fu_159_ap_start_reg : STD_LOGIC := '0';
    signal grp_tanh_1_fu_197_ap_start_reg : STD_LOGIC := '0';
    signal grp_tanh_fu_219_ap_start_reg : STD_LOGIC := '0';
    signal grp_sigmoid_fu_281_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal tmp_fu_837_p3 : STD_LOGIC_VECTOR (29 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to42 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component compute_layer_0_0_0_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (1439 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component compute_layer_0_0_0_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component compute_layer_0_0_0_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component tanh_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_16_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_17_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_18_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_19_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_20_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_21_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_22_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_23_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_24_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_25_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_26_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_27_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_28_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_29_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_30_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_31_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_16 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_17 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_18 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_19 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_20 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_21 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_22 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_23 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_24 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_25 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_26 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_27 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_28 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_29 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_30 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_31 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component tanh_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component tanh IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component compute_layer_0_0_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component compute_layer_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_2_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_3_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_4_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_5_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_6_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_7_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_8_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_9_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_10_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_11_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_12_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_13_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_14_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        data_15_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component sigmoid IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component linear IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (17 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    grp_compute_layer_0_0_0_2_fu_97 : component compute_layer_0_0_0_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_V_read => data_V_in_sig,
        ap_return_0 => grp_compute_layer_0_0_0_2_fu_97_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_2_fu_97_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_2_fu_97_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_2_fu_97_ap_return_3,
        ap_return_4 => grp_compute_layer_0_0_0_2_fu_97_ap_return_4,
        ap_return_5 => grp_compute_layer_0_0_0_2_fu_97_ap_return_5,
        ap_return_6 => grp_compute_layer_0_0_0_2_fu_97_ap_return_6,
        ap_return_7 => grp_compute_layer_0_0_0_2_fu_97_ap_return_7,
        ap_return_8 => grp_compute_layer_0_0_0_2_fu_97_ap_return_8,
        ap_return_9 => grp_compute_layer_0_0_0_2_fu_97_ap_return_9,
        ap_return_10 => grp_compute_layer_0_0_0_2_fu_97_ap_return_10,
        ap_return_11 => grp_compute_layer_0_0_0_2_fu_97_ap_return_11,
        ap_return_12 => grp_compute_layer_0_0_0_2_fu_97_ap_return_12,
        ap_return_13 => grp_compute_layer_0_0_0_2_fu_97_ap_return_13,
        ap_return_14 => grp_compute_layer_0_0_0_2_fu_97_ap_return_14,
        ap_return_15 => grp_compute_layer_0_0_0_2_fu_97_ap_return_15,
        ap_return_16 => grp_compute_layer_0_0_0_2_fu_97_ap_return_16,
        ap_return_17 => grp_compute_layer_0_0_0_2_fu_97_ap_return_17,
        ap_return_18 => grp_compute_layer_0_0_0_2_fu_97_ap_return_18,
        ap_return_19 => grp_compute_layer_0_0_0_2_fu_97_ap_return_19,
        ap_return_20 => grp_compute_layer_0_0_0_2_fu_97_ap_return_20,
        ap_return_21 => grp_compute_layer_0_0_0_2_fu_97_ap_return_21,
        ap_return_22 => grp_compute_layer_0_0_0_2_fu_97_ap_return_22,
        ap_return_23 => grp_compute_layer_0_0_0_2_fu_97_ap_return_23,
        ap_return_24 => grp_compute_layer_0_0_0_2_fu_97_ap_return_24,
        ap_return_25 => grp_compute_layer_0_0_0_2_fu_97_ap_return_25,
        ap_return_26 => grp_compute_layer_0_0_0_2_fu_97_ap_return_26,
        ap_return_27 => grp_compute_layer_0_0_0_2_fu_97_ap_return_27,
        ap_return_28 => grp_compute_layer_0_0_0_2_fu_97_ap_return_28,
        ap_return_29 => grp_compute_layer_0_0_0_2_fu_97_ap_return_29,
        ap_return_30 => grp_compute_layer_0_0_0_2_fu_97_ap_return_30,
        ap_return_31 => grp_compute_layer_0_0_0_2_fu_97_ap_return_31,
        ap_ce => grp_compute_layer_0_0_0_2_fu_97_ap_ce);

    grp_compute_layer_0_0_0_1_fu_103 : component compute_layer_0_0_0_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => layer1_out_0_V_reg_1015,
        data_1_V_read => layer1_out_1_V_reg_1020,
        data_2_V_read => layer1_out_2_V_reg_1025,
        data_3_V_read => layer1_out_3_V_reg_1030,
        data_4_V_read => layer1_out_4_V_reg_1035,
        data_5_V_read => layer1_out_5_V_reg_1040,
        data_6_V_read => layer1_out_6_V_reg_1045,
        data_7_V_read => layer1_out_7_V_reg_1050,
        data_8_V_read => layer1_out_8_V_reg_1055,
        data_9_V_read => layer1_out_9_V_reg_1060,
        data_10_V_read => layer1_out_10_V_reg_1065,
        data_11_V_read => layer1_out_11_V_reg_1070,
        data_12_V_read => layer1_out_12_V_reg_1075,
        data_13_V_read => layer1_out_13_V_reg_1080,
        data_14_V_read => layer1_out_14_V_reg_1085,
        data_15_V_read => layer1_out_15_V_reg_1090,
        data_16_V_read => layer1_out_16_V_reg_1095,
        data_17_V_read => layer1_out_17_V_reg_1100,
        data_18_V_read => layer1_out_18_V_reg_1105,
        data_19_V_read => layer1_out_19_V_reg_1110,
        data_20_V_read => layer1_out_20_V_reg_1115,
        data_21_V_read => layer1_out_21_V_reg_1120,
        data_22_V_read => layer1_out_22_V_reg_1125,
        data_23_V_read => layer1_out_23_V_reg_1130,
        data_24_V_read => layer1_out_24_V_reg_1135,
        data_25_V_read => layer1_out_25_V_reg_1140,
        data_26_V_read => layer1_out_26_V_reg_1145,
        data_27_V_read => layer1_out_27_V_reg_1150,
        data_28_V_read => layer1_out_28_V_reg_1155,
        data_29_V_read => layer1_out_29_V_reg_1160,
        data_30_V_read => layer1_out_30_V_reg_1165,
        data_31_V_read => layer1_out_31_V_reg_1170,
        ap_return_0 => grp_compute_layer_0_0_0_1_fu_103_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_1_fu_103_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_1_fu_103_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_1_fu_103_ap_return_3,
        ap_return_4 => grp_compute_layer_0_0_0_1_fu_103_ap_return_4,
        ap_return_5 => grp_compute_layer_0_0_0_1_fu_103_ap_return_5,
        ap_return_6 => grp_compute_layer_0_0_0_1_fu_103_ap_return_6,
        ap_return_7 => grp_compute_layer_0_0_0_1_fu_103_ap_return_7,
        ap_return_8 => grp_compute_layer_0_0_0_1_fu_103_ap_return_8,
        ap_return_9 => grp_compute_layer_0_0_0_1_fu_103_ap_return_9,
        ap_return_10 => grp_compute_layer_0_0_0_1_fu_103_ap_return_10,
        ap_return_11 => grp_compute_layer_0_0_0_1_fu_103_ap_return_11,
        ap_return_12 => grp_compute_layer_0_0_0_1_fu_103_ap_return_12,
        ap_return_13 => grp_compute_layer_0_0_0_1_fu_103_ap_return_13,
        ap_return_14 => grp_compute_layer_0_0_0_1_fu_103_ap_return_14,
        ap_return_15 => grp_compute_layer_0_0_0_1_fu_103_ap_return_15,
        ap_ce => grp_compute_layer_0_0_0_1_fu_103_ap_ce);

    grp_compute_layer_0_0_0_s_fu_139 : component compute_layer_0_0_0_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => layer2_out_0_V_reg_1255,
        data_1_V_read => layer2_out_1_V_reg_1260,
        data_2_V_read => layer2_out_2_V_reg_1265,
        data_3_V_read => layer2_out_3_V_reg_1270,
        data_4_V_read => layer2_out_4_V_reg_1275,
        data_5_V_read => layer2_out_5_V_reg_1280,
        data_6_V_read => layer2_out_6_V_reg_1285,
        data_7_V_read => layer2_out_7_V_reg_1290,
        data_8_V_read => layer2_out_8_V_reg_1295,
        data_9_V_read => layer2_out_9_V_reg_1300,
        data_10_V_read => layer2_out_10_V_reg_1305,
        data_11_V_read => layer2_out_11_V_reg_1310,
        data_12_V_read => layer2_out_12_V_reg_1315,
        data_13_V_read => layer2_out_13_V_reg_1320,
        data_14_V_read => layer2_out_14_V_reg_1325,
        data_15_V_read => layer2_out_15_V_reg_1330,
        ap_return_0 => grp_compute_layer_0_0_0_s_fu_139_ap_return_0,
        ap_return_1 => grp_compute_layer_0_0_0_s_fu_139_ap_return_1,
        ap_return_2 => grp_compute_layer_0_0_0_s_fu_139_ap_return_2,
        ap_return_3 => grp_compute_layer_0_0_0_s_fu_139_ap_return_3,
        ap_return_4 => grp_compute_layer_0_0_0_s_fu_139_ap_return_4,
        ap_return_5 => grp_compute_layer_0_0_0_s_fu_139_ap_return_5,
        ap_return_6 => grp_compute_layer_0_0_0_s_fu_139_ap_return_6,
        ap_return_7 => grp_compute_layer_0_0_0_s_fu_139_ap_return_7,
        ap_return_8 => grp_compute_layer_0_0_0_s_fu_139_ap_return_8,
        ap_return_9 => grp_compute_layer_0_0_0_s_fu_139_ap_return_9,
        ap_return_10 => grp_compute_layer_0_0_0_s_fu_139_ap_return_10,
        ap_return_11 => grp_compute_layer_0_0_0_s_fu_139_ap_return_11,
        ap_return_12 => grp_compute_layer_0_0_0_s_fu_139_ap_return_12,
        ap_return_13 => grp_compute_layer_0_0_0_s_fu_139_ap_return_13,
        ap_return_14 => grp_compute_layer_0_0_0_s_fu_139_ap_return_14,
        ap_return_15 => grp_compute_layer_0_0_0_s_fu_139_ap_return_15,
        ap_ce => grp_compute_layer_0_0_0_s_fu_139_ap_ce);

    grp_tanh_2_fu_159 : component tanh_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_2_fu_159_ap_start,
        ap_done => grp_tanh_2_fu_159_ap_done,
        ap_idle => grp_tanh_2_fu_159_ap_idle,
        ap_ready => grp_tanh_2_fu_159_ap_ready,
        ap_ce => grp_tanh_2_fu_159_ap_ce,
        data_0_V_read => logits1_0_V_reg_855,
        data_1_V_read => logits1_1_V_reg_860,
        data_2_V_read => logits1_2_V_reg_865,
        data_3_V_read => logits1_3_V_reg_870,
        data_4_V_read => logits1_4_V_reg_875,
        data_5_V_read => logits1_5_V_reg_880,
        data_6_V_read => logits1_6_V_reg_885,
        data_7_V_read => logits1_7_V_reg_890,
        data_8_V_read => logits1_8_V_reg_895,
        data_9_V_read => logits1_9_V_reg_900,
        data_10_V_read => logits1_10_V_reg_905,
        data_11_V_read => logits1_11_V_reg_910,
        data_12_V_read => logits1_12_V_reg_915,
        data_13_V_read => logits1_13_V_reg_920,
        data_14_V_read => logits1_14_V_reg_925,
        data_15_V_read => logits1_15_V_reg_930,
        data_16_V_read => logits1_16_V_reg_935,
        data_17_V_read => logits1_17_V_reg_940,
        data_18_V_read => logits1_18_V_reg_945,
        data_19_V_read => logits1_19_V_reg_950,
        data_20_V_read => logits1_20_V_reg_955,
        data_21_V_read => logits1_21_V_reg_960,
        data_22_V_read => logits1_22_V_reg_965,
        data_23_V_read => logits1_23_V_reg_970,
        data_24_V_read => logits1_24_V_reg_975,
        data_25_V_read => logits1_25_V_reg_980,
        data_26_V_read => logits1_26_V_reg_985,
        data_27_V_read => logits1_27_V_reg_990,
        data_28_V_read => logits1_28_V_reg_995,
        data_29_V_read => logits1_29_V_reg_1000,
        data_30_V_read => logits1_30_V_reg_1005,
        data_31_V_read => logits1_31_V_reg_1010,
        ap_return_0 => grp_tanh_2_fu_159_ap_return_0,
        ap_return_1 => grp_tanh_2_fu_159_ap_return_1,
        ap_return_2 => grp_tanh_2_fu_159_ap_return_2,
        ap_return_3 => grp_tanh_2_fu_159_ap_return_3,
        ap_return_4 => grp_tanh_2_fu_159_ap_return_4,
        ap_return_5 => grp_tanh_2_fu_159_ap_return_5,
        ap_return_6 => grp_tanh_2_fu_159_ap_return_6,
        ap_return_7 => grp_tanh_2_fu_159_ap_return_7,
        ap_return_8 => grp_tanh_2_fu_159_ap_return_8,
        ap_return_9 => grp_tanh_2_fu_159_ap_return_9,
        ap_return_10 => grp_tanh_2_fu_159_ap_return_10,
        ap_return_11 => grp_tanh_2_fu_159_ap_return_11,
        ap_return_12 => grp_tanh_2_fu_159_ap_return_12,
        ap_return_13 => grp_tanh_2_fu_159_ap_return_13,
        ap_return_14 => grp_tanh_2_fu_159_ap_return_14,
        ap_return_15 => grp_tanh_2_fu_159_ap_return_15,
        ap_return_16 => grp_tanh_2_fu_159_ap_return_16,
        ap_return_17 => grp_tanh_2_fu_159_ap_return_17,
        ap_return_18 => grp_tanh_2_fu_159_ap_return_18,
        ap_return_19 => grp_tanh_2_fu_159_ap_return_19,
        ap_return_20 => grp_tanh_2_fu_159_ap_return_20,
        ap_return_21 => grp_tanh_2_fu_159_ap_return_21,
        ap_return_22 => grp_tanh_2_fu_159_ap_return_22,
        ap_return_23 => grp_tanh_2_fu_159_ap_return_23,
        ap_return_24 => grp_tanh_2_fu_159_ap_return_24,
        ap_return_25 => grp_tanh_2_fu_159_ap_return_25,
        ap_return_26 => grp_tanh_2_fu_159_ap_return_26,
        ap_return_27 => grp_tanh_2_fu_159_ap_return_27,
        ap_return_28 => grp_tanh_2_fu_159_ap_return_28,
        ap_return_29 => grp_tanh_2_fu_159_ap_return_29,
        ap_return_30 => grp_tanh_2_fu_159_ap_return_30,
        ap_return_31 => grp_tanh_2_fu_159_ap_return_31);

    grp_tanh_1_fu_197 : component tanh_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_1_fu_197_ap_start,
        ap_done => grp_tanh_1_fu_197_ap_done,
        ap_idle => grp_tanh_1_fu_197_ap_idle,
        ap_ready => grp_tanh_1_fu_197_ap_ready,
        ap_ce => grp_tanh_1_fu_197_ap_ce,
        data_0_V_read => logits2_0_V_reg_1175,
        data_1_V_read => logits2_1_V_reg_1180,
        data_2_V_read => logits2_2_V_reg_1185,
        data_3_V_read => logits2_3_V_reg_1190,
        data_4_V_read => logits2_4_V_reg_1195,
        data_5_V_read => logits2_5_V_reg_1200,
        data_6_V_read => logits2_6_V_reg_1205,
        data_7_V_read => logits2_7_V_reg_1210,
        data_8_V_read => logits2_8_V_reg_1215,
        data_9_V_read => logits2_9_V_reg_1220,
        data_10_V_read => logits2_10_V_reg_1225,
        data_11_V_read => logits2_11_V_reg_1230,
        data_12_V_read => logits2_12_V_reg_1235,
        data_13_V_read => logits2_13_V_reg_1240,
        data_14_V_read => logits2_14_V_reg_1245,
        data_15_V_read => logits2_15_V_reg_1250,
        ap_return_0 => grp_tanh_1_fu_197_ap_return_0,
        ap_return_1 => grp_tanh_1_fu_197_ap_return_1,
        ap_return_2 => grp_tanh_1_fu_197_ap_return_2,
        ap_return_3 => grp_tanh_1_fu_197_ap_return_3,
        ap_return_4 => grp_tanh_1_fu_197_ap_return_4,
        ap_return_5 => grp_tanh_1_fu_197_ap_return_5,
        ap_return_6 => grp_tanh_1_fu_197_ap_return_6,
        ap_return_7 => grp_tanh_1_fu_197_ap_return_7,
        ap_return_8 => grp_tanh_1_fu_197_ap_return_8,
        ap_return_9 => grp_tanh_1_fu_197_ap_return_9,
        ap_return_10 => grp_tanh_1_fu_197_ap_return_10,
        ap_return_11 => grp_tanh_1_fu_197_ap_return_11,
        ap_return_12 => grp_tanh_1_fu_197_ap_return_12,
        ap_return_13 => grp_tanh_1_fu_197_ap_return_13,
        ap_return_14 => grp_tanh_1_fu_197_ap_return_14,
        ap_return_15 => grp_tanh_1_fu_197_ap_return_15);

    grp_tanh_fu_219 : component tanh
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_tanh_fu_219_ap_start,
        ap_done => grp_tanh_fu_219_ap_done,
        ap_idle => grp_tanh_fu_219_ap_idle,
        ap_ready => grp_tanh_fu_219_ap_ready,
        ap_ce => grp_tanh_fu_219_ap_ce,
        data_0_V_read => logits3_0_V_reg_1335,
        data_1_V_read => logits3_1_V_reg_1340,
        data_2_V_read => logits3_2_V_reg_1345,
        data_3_V_read => logits3_3_V_reg_1350,
        data_4_V_read => logits3_4_V_reg_1355,
        data_5_V_read => logits3_5_V_reg_1360,
        data_6_V_read => logits3_6_V_reg_1365,
        data_7_V_read => logits3_7_V_reg_1370,
        data_8_V_read => logits3_8_V_reg_1375,
        data_9_V_read => logits3_9_V_reg_1380,
        data_10_V_read => logits3_10_V_reg_1385,
        data_11_V_read => logits3_11_V_reg_1390,
        data_12_V_read => logits3_12_V_reg_1395,
        data_13_V_read => logits3_13_V_reg_1400,
        data_14_V_read => logits3_14_V_reg_1405,
        data_15_V_read => logits3_15_V_reg_1410,
        ap_return_0 => grp_tanh_fu_219_ap_return_0,
        ap_return_1 => grp_tanh_fu_219_ap_return_1,
        ap_return_2 => grp_tanh_fu_219_ap_return_2,
        ap_return_3 => grp_tanh_fu_219_ap_return_3,
        ap_return_4 => grp_tanh_fu_219_ap_return_4,
        ap_return_5 => grp_tanh_fu_219_ap_return_5,
        ap_return_6 => grp_tanh_fu_219_ap_return_6,
        ap_return_7 => grp_tanh_fu_219_ap_return_7,
        ap_return_8 => grp_tanh_fu_219_ap_return_8,
        ap_return_9 => grp_tanh_fu_219_ap_return_9,
        ap_return_10 => grp_tanh_fu_219_ap_return_10,
        ap_return_11 => grp_tanh_fu_219_ap_return_11,
        ap_return_12 => grp_tanh_fu_219_ap_return_12,
        ap_return_13 => grp_tanh_fu_219_ap_return_13,
        ap_return_14 => grp_tanh_fu_219_ap_return_14,
        ap_return_15 => grp_tanh_fu_219_ap_return_15);

    grp_compute_layer_0_0_1_fu_241 : component compute_layer_0_0_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => grp_tanh_fu_219_ap_return_0,
        data_1_V_read => grp_tanh_fu_219_ap_return_1,
        data_2_V_read => grp_tanh_fu_219_ap_return_2,
        data_3_V_read => grp_tanh_fu_219_ap_return_3,
        data_4_V_read => grp_tanh_fu_219_ap_return_4,
        data_5_V_read => grp_tanh_fu_219_ap_return_5,
        data_6_V_read => grp_tanh_fu_219_ap_return_6,
        data_7_V_read => grp_tanh_fu_219_ap_return_7,
        data_8_V_read => grp_tanh_fu_219_ap_return_8,
        data_9_V_read => grp_tanh_fu_219_ap_return_9,
        data_10_V_read => grp_tanh_fu_219_ap_return_10,
        data_11_V_read => grp_tanh_fu_219_ap_return_11,
        data_12_V_read => grp_tanh_fu_219_ap_return_12,
        data_13_V_read => grp_tanh_fu_219_ap_return_13,
        data_14_V_read => grp_tanh_fu_219_ap_return_14,
        data_15_V_read => grp_tanh_fu_219_ap_return_15,
        ap_return => grp_compute_layer_0_0_1_fu_241_ap_return,
        ap_ce => grp_compute_layer_0_0_1_fu_241_ap_ce);

    grp_compute_layer_0_0_fu_261 : component compute_layer_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_0_V_read => grp_tanh_fu_219_ap_return_0,
        data_1_V_read => grp_tanh_fu_219_ap_return_1,
        data_2_V_read => grp_tanh_fu_219_ap_return_2,
        data_3_V_read => grp_tanh_fu_219_ap_return_3,
        data_4_V_read => grp_tanh_fu_219_ap_return_4,
        data_5_V_read => grp_tanh_fu_219_ap_return_5,
        data_6_V_read => grp_tanh_fu_219_ap_return_6,
        data_7_V_read => grp_tanh_fu_219_ap_return_7,
        data_8_V_read => grp_tanh_fu_219_ap_return_8,
        data_9_V_read => grp_tanh_fu_219_ap_return_9,
        data_10_V_read => grp_tanh_fu_219_ap_return_10,
        data_11_V_read => grp_tanh_fu_219_ap_return_11,
        data_12_V_read => grp_tanh_fu_219_ap_return_12,
        data_13_V_read => grp_tanh_fu_219_ap_return_13,
        data_14_V_read => grp_tanh_fu_219_ap_return_14,
        data_15_V_read => grp_tanh_fu_219_ap_return_15,
        ap_return => grp_compute_layer_0_0_fu_261_ap_return,
        ap_ce => grp_compute_layer_0_0_fu_261_ap_ce);

    grp_sigmoid_fu_281 : component sigmoid
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_sigmoid_fu_281_ap_start,
        ap_done => grp_sigmoid_fu_281_ap_done,
        ap_idle => grp_sigmoid_fu_281_ap_idle,
        ap_ready => grp_sigmoid_fu_281_ap_ready,
        ap_ce => grp_sigmoid_fu_281_ap_ce,
        data_V_read => logits5_0_V_reg_1511,
        ap_return => grp_sigmoid_fu_281_ap_return);

    layer4_out_0_V_linear_fu_288 : component linear
    port map (
        ap_ready => layer4_out_0_V_linear_fu_288_ap_ready,
        data_V_read => logits4_0_V_reg_1516_pp0_iter42_reg,
        ap_return => layer4_out_0_V_linear_fu_288_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter34_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter34 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter34 <= ap_enable_reg_pp0_iter33;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter35_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter35 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter35 <= ap_enable_reg_pp0_iter34;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter36_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter36 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter36 <= ap_enable_reg_pp0_iter35;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter37_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter37 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter37 <= ap_enable_reg_pp0_iter36;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter38_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter38 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter38 <= ap_enable_reg_pp0_iter37;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter39_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter39 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter39 <= ap_enable_reg_pp0_iter38;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter40_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter40 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter40 <= ap_enable_reg_pp0_iter39;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter41_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter41 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter41 <= ap_enable_reg_pp0_iter40;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter42_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter42 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter42 <= ap_enable_reg_pp0_iter41;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter43_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter43 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter43 <= ap_enable_reg_pp0_iter42;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    data_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    data_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (data_V_ap_vld = ap_const_logic_1))) then 
                    data_V_ap_vld_preg <= data_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    data_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                data_V_preg <= ap_const_lv1440_lc_1;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (data_V_ap_vld = ap_const_logic_1))) then 
                    data_V_preg <= data_V;
                end if; 
            end if;
        end if;
    end process;


    grp_sigmoid_fu_281_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_sigmoid_fu_281_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter39 = ap_const_logic_1))) then 
                    grp_sigmoid_fu_281_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_sigmoid_fu_281_ap_ready = ap_const_logic_1)) then 
                    grp_sigmoid_fu_281_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_1_fu_197_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_1_fu_197_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1))) then 
                    grp_tanh_1_fu_197_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_1_fu_197_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_1_fu_197_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_2_fu_159_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_2_fu_159_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter8 = ap_const_logic_1))) then 
                    grp_tanh_2_fu_159_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_2_fu_159_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_2_fu_159_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_tanh_fu_219_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_tanh_fu_219_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter30 = ap_const_logic_1))) then 
                    grp_tanh_fu_219_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_tanh_fu_219_ap_ready = ap_const_logic_1)) then 
                    grp_tanh_fu_219_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                layer1_out_0_V_reg_1015 <= grp_tanh_2_fu_159_ap_return_0;
                layer1_out_10_V_reg_1065 <= grp_tanh_2_fu_159_ap_return_10;
                layer1_out_11_V_reg_1070 <= grp_tanh_2_fu_159_ap_return_11;
                layer1_out_12_V_reg_1075 <= grp_tanh_2_fu_159_ap_return_12;
                layer1_out_13_V_reg_1080 <= grp_tanh_2_fu_159_ap_return_13;
                layer1_out_14_V_reg_1085 <= grp_tanh_2_fu_159_ap_return_14;
                layer1_out_15_V_reg_1090 <= grp_tanh_2_fu_159_ap_return_15;
                layer1_out_16_V_reg_1095 <= grp_tanh_2_fu_159_ap_return_16;
                layer1_out_17_V_reg_1100 <= grp_tanh_2_fu_159_ap_return_17;
                layer1_out_18_V_reg_1105 <= grp_tanh_2_fu_159_ap_return_18;
                layer1_out_19_V_reg_1110 <= grp_tanh_2_fu_159_ap_return_19;
                layer1_out_1_V_reg_1020 <= grp_tanh_2_fu_159_ap_return_1;
                layer1_out_20_V_reg_1115 <= grp_tanh_2_fu_159_ap_return_20;
                layer1_out_21_V_reg_1120 <= grp_tanh_2_fu_159_ap_return_21;
                layer1_out_22_V_reg_1125 <= grp_tanh_2_fu_159_ap_return_22;
                layer1_out_23_V_reg_1130 <= grp_tanh_2_fu_159_ap_return_23;
                layer1_out_24_V_reg_1135 <= grp_tanh_2_fu_159_ap_return_24;
                layer1_out_25_V_reg_1140 <= grp_tanh_2_fu_159_ap_return_25;
                layer1_out_26_V_reg_1145 <= grp_tanh_2_fu_159_ap_return_26;
                layer1_out_27_V_reg_1150 <= grp_tanh_2_fu_159_ap_return_27;
                layer1_out_28_V_reg_1155 <= grp_tanh_2_fu_159_ap_return_28;
                layer1_out_29_V_reg_1160 <= grp_tanh_2_fu_159_ap_return_29;
                layer1_out_2_V_reg_1025 <= grp_tanh_2_fu_159_ap_return_2;
                layer1_out_30_V_reg_1165 <= grp_tanh_2_fu_159_ap_return_30;
                layer1_out_31_V_reg_1170 <= grp_tanh_2_fu_159_ap_return_31;
                layer1_out_3_V_reg_1030 <= grp_tanh_2_fu_159_ap_return_3;
                layer1_out_4_V_reg_1035 <= grp_tanh_2_fu_159_ap_return_4;
                layer1_out_5_V_reg_1040 <= grp_tanh_2_fu_159_ap_return_5;
                layer1_out_6_V_reg_1045 <= grp_tanh_2_fu_159_ap_return_6;
                layer1_out_7_V_reg_1050 <= grp_tanh_2_fu_159_ap_return_7;
                layer1_out_8_V_reg_1055 <= grp_tanh_2_fu_159_ap_return_8;
                layer1_out_9_V_reg_1060 <= grp_tanh_2_fu_159_ap_return_9;
                layer2_out_0_V_reg_1255 <= grp_tanh_1_fu_197_ap_return_0;
                layer2_out_10_V_reg_1305 <= grp_tanh_1_fu_197_ap_return_10;
                layer2_out_11_V_reg_1310 <= grp_tanh_1_fu_197_ap_return_11;
                layer2_out_12_V_reg_1315 <= grp_tanh_1_fu_197_ap_return_12;
                layer2_out_13_V_reg_1320 <= grp_tanh_1_fu_197_ap_return_13;
                layer2_out_14_V_reg_1325 <= grp_tanh_1_fu_197_ap_return_14;
                layer2_out_15_V_reg_1330 <= grp_tanh_1_fu_197_ap_return_15;
                layer2_out_1_V_reg_1260 <= grp_tanh_1_fu_197_ap_return_1;
                layer2_out_2_V_reg_1265 <= grp_tanh_1_fu_197_ap_return_2;
                layer2_out_3_V_reg_1270 <= grp_tanh_1_fu_197_ap_return_3;
                layer2_out_4_V_reg_1275 <= grp_tanh_1_fu_197_ap_return_4;
                layer2_out_5_V_reg_1280 <= grp_tanh_1_fu_197_ap_return_5;
                layer2_out_6_V_reg_1285 <= grp_tanh_1_fu_197_ap_return_6;
                layer2_out_7_V_reg_1290 <= grp_tanh_1_fu_197_ap_return_7;
                layer2_out_8_V_reg_1295 <= grp_tanh_1_fu_197_ap_return_8;
                layer2_out_9_V_reg_1300 <= grp_tanh_1_fu_197_ap_return_9;
                logits1_0_V_reg_855 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_0;
                logits1_10_V_reg_905 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_10;
                logits1_11_V_reg_910 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_11;
                logits1_12_V_reg_915 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_12;
                logits1_13_V_reg_920 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_13;
                logits1_14_V_reg_925 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_14;
                logits1_15_V_reg_930 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_15;
                logits1_16_V_reg_935 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_16;
                logits1_17_V_reg_940 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_17;
                logits1_18_V_reg_945 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_18;
                logits1_19_V_reg_950 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_19;
                logits1_1_V_reg_860 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_1;
                logits1_20_V_reg_955 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_20;
                logits1_21_V_reg_960 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_21;
                logits1_22_V_reg_965 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_22;
                logits1_23_V_reg_970 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_23;
                logits1_24_V_reg_975 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_24;
                logits1_25_V_reg_980 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_25;
                logits1_26_V_reg_985 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_26;
                logits1_27_V_reg_990 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_27;
                logits1_28_V_reg_995 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_28;
                logits1_29_V_reg_1000 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_29;
                logits1_2_V_reg_865 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_2;
                logits1_30_V_reg_1005 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_30;
                logits1_31_V_reg_1010 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_31;
                logits1_3_V_reg_870 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_3;
                logits1_4_V_reg_875 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_4;
                logits1_5_V_reg_880 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_5;
                logits1_6_V_reg_885 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_6;
                logits1_7_V_reg_890 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_7;
                logits1_8_V_reg_895 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_8;
                logits1_9_V_reg_900 <= grp_compute_layer_0_0_0_2_fu_97_ap_return_9;
                logits2_0_V_reg_1175 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_0;
                logits2_10_V_reg_1225 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_10;
                logits2_11_V_reg_1230 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_11;
                logits2_12_V_reg_1235 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_12;
                logits2_13_V_reg_1240 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_13;
                logits2_14_V_reg_1245 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_14;
                logits2_15_V_reg_1250 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_15;
                logits2_1_V_reg_1180 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_1;
                logits2_2_V_reg_1185 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_2;
                logits2_3_V_reg_1190 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_3;
                logits2_4_V_reg_1195 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_4;
                logits2_5_V_reg_1200 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_5;
                logits2_6_V_reg_1205 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_6;
                logits2_7_V_reg_1210 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_7;
                logits2_8_V_reg_1215 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_8;
                logits2_9_V_reg_1220 <= grp_compute_layer_0_0_0_1_fu_103_ap_return_9;
                logits3_0_V_reg_1335 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_0;
                logits3_10_V_reg_1385 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_10;
                logits3_11_V_reg_1390 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_11;
                logits3_12_V_reg_1395 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_12;
                logits3_13_V_reg_1400 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_13;
                logits3_14_V_reg_1405 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_14;
                logits3_15_V_reg_1410 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_15;
                logits3_1_V_reg_1340 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_1;
                logits3_2_V_reg_1345 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_2;
                logits3_3_V_reg_1350 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_3;
                logits3_4_V_reg_1355 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_4;
                logits3_5_V_reg_1360 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_5;
                logits3_6_V_reg_1365 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_6;
                logits3_7_V_reg_1370 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_7;
                logits3_8_V_reg_1375 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_8;
                logits3_9_V_reg_1380 <= grp_compute_layer_0_0_0_s_fu_139_ap_return_9;
                logits4_0_V_reg_1516 <= grp_compute_layer_0_0_1_fu_241_ap_return;
                logits4_0_V_reg_1516_pp0_iter41_reg <= logits4_0_V_reg_1516;
                logits4_0_V_reg_1516_pp0_iter42_reg <= logits4_0_V_reg_1516_pp0_iter41_reg;
                logits5_0_V_reg_1511 <= grp_compute_layer_0_0_fu_261_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, data_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, data_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, data_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (data_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;

        ap_block_state10_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, data_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (data_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state20_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter35 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state37_pp0_stage0_iter36 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp0_stage0_iter37 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state39_pp0_stage0_iter38 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state40_pp0_stage0_iter39 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state41_pp0_stage0_iter40 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state42_pp0_stage0_iter41 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp0_stage0_iter42 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp0_stage0_iter43 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter43 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42, ap_enable_reg_pp0_iter43)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter43 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to42_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33, ap_enable_reg_pp0_iter34, ap_enable_reg_pp0_iter35, ap_enable_reg_pp0_iter36, ap_enable_reg_pp0_iter37, ap_enable_reg_pp0_iter38, ap_enable_reg_pp0_iter39, ap_enable_reg_pp0_iter40, ap_enable_reg_pp0_iter41, ap_enable_reg_pp0_iter42)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter42 = ap_const_logic_0) and (ap_enable_reg_pp0_iter41 = ap_const_logic_0) and (ap_enable_reg_pp0_iter40 = ap_const_logic_0) and (ap_enable_reg_pp0_iter39 = ap_const_logic_0) and (ap_enable_reg_pp0_iter38 = ap_const_logic_0) and (ap_enable_reg_pp0_iter37 = ap_const_logic_0) and (ap_enable_reg_pp0_iter36 = ap_const_logic_0) and (ap_enable_reg_pp0_iter35 = ap_const_logic_0) and (ap_enable_reg_pp0_iter34 = ap_const_logic_0) and (ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0))) then 
            ap_idle_pp0_0to42 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to42 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to42)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to42 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in <= ap_const_lv16_50;

    const_size_in_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            const_size_in_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out <= ap_const_lv16_2;

    const_size_out_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            const_size_out_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    data_V_ap_vld_in_sig_assign_proc : process(data_V_ap_vld, data_V_ap_vld_preg)
    begin
        if ((data_V_ap_vld = ap_const_logic_1)) then 
            data_V_ap_vld_in_sig <= data_V_ap_vld;
        else 
            data_V_ap_vld_in_sig <= data_V_ap_vld_preg;
        end if; 
    end process;


    data_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, data_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data_V_blk_n <= data_V_ap_vld;
        else 
            data_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    data_V_in_sig_assign_proc : process(data_V_ap_vld, data_V, data_V_preg)
    begin
        if ((data_V_ap_vld = ap_const_logic_1)) then 
            data_V_in_sig <= data_V;
        else 
            data_V_in_sig <= data_V_preg;
        end if; 
    end process;


    grp_compute_layer_0_0_0_1_fu_103_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_1_fu_103_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_1_fu_103_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_0_2_fu_97_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_2_fu_97_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_2_fu_97_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_0_s_fu_139_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_0_s_fu_139_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_0_s_fu_139_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_1_fu_241_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_1_fu_241_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_1_fu_241_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_compute_layer_0_0_fu_261_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_compute_layer_0_0_fu_261_ap_ce <= ap_const_logic_1;
        else 
            grp_compute_layer_0_0_fu_261_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_sigmoid_fu_281_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_sigmoid_fu_281_ap_ce <= ap_const_logic_1;
        else 
            grp_sigmoid_fu_281_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_sigmoid_fu_281_ap_start <= grp_sigmoid_fu_281_ap_start_reg;

    grp_tanh_1_fu_197_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_tanh_1_fu_197_ap_ce <= ap_const_logic_1;
        else 
            grp_tanh_1_fu_197_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_tanh_1_fu_197_ap_start <= grp_tanh_1_fu_197_ap_start_reg;

    grp_tanh_2_fu_159_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_tanh_2_fu_159_ap_ce <= ap_const_logic_1;
        else 
            grp_tanh_2_fu_159_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_tanh_2_fu_159_ap_start <= grp_tanh_2_fu_159_ap_start_reg;

    grp_tanh_fu_219_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_tanh_fu_219_ap_ce <= ap_const_logic_1;
        else 
            grp_tanh_fu_219_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_tanh_fu_219_ap_start <= grp_tanh_fu_219_ap_start_reg;
    res_V <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_837_p3),36));

    res_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter43, ap_block_pp0_stage0_01001)
    begin
        if (((ap_enable_reg_pp0_iter43 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_01001))) then 
            res_V_ap_vld <= ap_const_logic_1;
        else 
            res_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_fu_837_p3 <= (grp_sigmoid_fu_281_ap_return & layer4_out_0_V_linear_fu_288_ap_return);
end behav;
