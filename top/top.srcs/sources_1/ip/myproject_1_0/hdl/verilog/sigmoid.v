// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.1
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module sigmoid (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        data_V_read,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [17:0] data_V_read;
output  [11:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
wire   [9:0] sigmoid_table10_address0;
reg    sigmoid_table10_ce0;
wire   [9:0] sigmoid_table10_q0;
wire   [11:0] tmp_420_fu_140_p1;
reg   [11:0] tmp_420_reg_210;
reg   [0:0] tmp_421_reg_215;
wire   [9:0] index_1_fu_190_p3;
reg   [9:0] index_1_reg_220;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_3_fu_198_p1;
wire   [11:0] tmp_98_fu_78_p4;
wire   [5:0] tmp_419_fu_100_p1;
wire   [11:0] p_Result_8_fu_104_p3;
wire  signed [12:0] ret_V_cast_fu_88_p1;
wire   [0:0] tmp_s_fu_112_p2;
wire   [12:0] ret_V_fu_118_p2;
wire   [0:0] tmp_418_fu_92_p3;
wire   [12:0] p_s_fu_124_p3;
wire   [12:0] p_5_fu_132_p3;
wire   [12:0] index_fu_144_p2;
wire   [11:0] index_cast_fu_158_p2;
wire   [11:0] p_4_fu_163_p3;
wire   [1:0] tmp_423_fu_174_p4;
wire   [0:0] icmp_fu_184_p2;
wire   [9:0] tmp_422_fu_170_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

sigmoid_sigmoid_tVhK #(
    .DataWidth( 10 ),
    .AddressRange( 1024 ),
    .AddressWidth( 10 ))
sigmoid_table10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sigmoid_table10_address0),
    .ce0(sigmoid_table10_ce0),
    .q0(sigmoid_table10_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        index_1_reg_220 <= index_1_fu_190_p3;
        tmp_420_reg_210 <= tmp_420_fu_140_p1;
        tmp_421_reg_215 <= index_fu_144_p2[32'd12];
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        sigmoid_table10_ce0 = 1'b1;
    end else begin
        sigmoid_table10_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = {{sigmoid_table10_q0}, {2'd0}};

assign icmp_fu_184_p2 = ((tmp_423_fu_174_p4 != 2'd0) ? 1'b1 : 1'b0);

assign index_1_fu_190_p3 = ((icmp_fu_184_p2[0:0] === 1'b1) ? 10'd1023 : tmp_422_fu_170_p1);

assign index_cast_fu_158_p2 = (12'd512 + tmp_420_reg_210);

assign index_fu_144_p2 = (13'd512 + p_5_fu_132_p3);

assign p_4_fu_163_p3 = ((tmp_421_reg_215[0:0] === 1'b1) ? 12'd0 : index_cast_fu_158_p2);

assign p_5_fu_132_p3 = ((tmp_418_fu_92_p3[0:0] === 1'b1) ? p_s_fu_124_p3 : ret_V_cast_fu_88_p1);

assign p_Result_8_fu_104_p3 = {{tmp_419_fu_100_p1}, {6'd0}};

assign p_s_fu_124_p3 = ((tmp_s_fu_112_p2[0:0] === 1'b1) ? ret_V_cast_fu_88_p1 : ret_V_fu_118_p2);

assign ret_V_cast_fu_88_p1 = $signed(tmp_98_fu_78_p4);

assign ret_V_fu_118_p2 = ($signed(13'd1) + $signed(ret_V_cast_fu_88_p1));

assign sigmoid_table10_address0 = tmp_3_fu_198_p1;

assign tmp_3_fu_198_p1 = index_1_reg_220;

assign tmp_418_fu_92_p3 = data_V_read[32'd17];

assign tmp_419_fu_100_p1 = data_V_read[5:0];

assign tmp_420_fu_140_p1 = p_5_fu_132_p3[11:0];

assign tmp_422_fu_170_p1 = p_4_fu_163_p3[9:0];

assign tmp_423_fu_174_p4 = {{p_4_fu_163_p3[11:10]}};

assign tmp_98_fu_78_p4 = {{data_V_read[17:6]}};

assign tmp_s_fu_112_p2 = ((p_Result_8_fu_104_p3 == 12'd0) ? 1'b1 : 1'b0);

endmodule //sigmoid
